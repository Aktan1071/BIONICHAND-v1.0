
RE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fac  08003fac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003fac  08003fac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fac  08003fac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fac  08003fac  00013fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fb0  08003fb0  00013fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  08003fc0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08003fc0  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc76  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001edd  00000000  00000000  0002dcab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  0002fb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  00030a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017273  00000000  00000000  000318c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106ee  00000000  00000000  00048b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088b94  00000000  00000000  00059229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1dbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f90  00000000  00000000  000e1e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d58 	.word	0x08003d58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003d58 	.word	0x08003d58

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	214e      	movs	r1, #78	; 0x4e
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f001 fdc9 	bl	8001d30 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	2000002c 	.word	0x2000002c

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	214e      	movs	r1, #78	; 0x4e
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <lcd_send_data+0x5c>)
 80001fa:	f001 fd99 	bl	8001d30 <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	2000002c 	.word	0x2000002c

0800020c <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	6039      	str	r1, [r7, #0]
    switch (row)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d003      	beq.n	8000224 <lcd_put_cur+0x18>
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2b01      	cmp	r3, #1
 8000220:	d005      	beq.n	800022e <lcd_put_cur+0x22>
 8000222:	e009      	b.n	8000238 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800022a:	603b      	str	r3, [r7, #0]
            break;
 800022c:	e004      	b.n	8000238 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000234:	603b      	str	r3, [r7, #0]
            break;
 8000236:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	b2db      	uxtb	r3, r3
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ff85 	bl	800014c <lcd_send_cmd>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}

0800024a <lcd_init>:


void lcd_init (void)
{
 800024a:	b580      	push	{r7, lr}
 800024c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800024e:	2032      	movs	r0, #50	; 0x32
 8000250:	f001 f8c4 	bl	80013dc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000254:	2030      	movs	r0, #48	; 0x30
 8000256:	f7ff ff79 	bl	800014c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800025a:	2005      	movs	r0, #5
 800025c:	f001 f8be 	bl	80013dc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000260:	2030      	movs	r0, #48	; 0x30
 8000262:	f7ff ff73 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000266:	2001      	movs	r0, #1
 8000268:	f001 f8b8 	bl	80013dc <HAL_Delay>
	lcd_send_cmd (0x30);
 800026c:	2030      	movs	r0, #48	; 0x30
 800026e:	f7ff ff6d 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 8000272:	200a      	movs	r0, #10
 8000274:	f001 f8b2 	bl	80013dc <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000278:	2020      	movs	r0, #32
 800027a:	f7ff ff67 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 800027e:	200a      	movs	r0, #10
 8000280:	f001 f8ac 	bl	80013dc <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000284:	2028      	movs	r0, #40	; 0x28
 8000286:	f7ff ff61 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 800028a:	2001      	movs	r0, #1
 800028c:	f001 f8a6 	bl	80013dc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000290:	2008      	movs	r0, #8
 8000292:	f7ff ff5b 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 8000296:	2001      	movs	r0, #1
 8000298:	f001 f8a0 	bl	80013dc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800029c:	2001      	movs	r0, #1
 800029e:	f7ff ff55 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002a2:	2001      	movs	r0, #1
 80002a4:	f001 f89a 	bl	80013dc <HAL_Delay>
	HAL_Delay(1);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f001 f897 	bl	80013dc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80002ae:	2006      	movs	r0, #6
 80002b0:	f7ff ff4c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002b4:	2001      	movs	r0, #1
 80002b6:	f001 f891 	bl	80013dc <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80002ba:	200c      	movs	r0, #12
 80002bc:	f7ff ff46 	bl	800014c <lcd_send_cmd>
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80002cc:	e006      	b.n	80002dc <lcd_send_string+0x18>
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	1c5a      	adds	r2, r3, #1
 80002d2:	607a      	str	r2, [r7, #4]
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff68 	bl	80001ac <lcd_send_data>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d1f4      	bne.n	80002ce <lcd_send_string+0xa>
}
 80002e4:	bf00      	nop
 80002e6:	bf00      	nop
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <Servot1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Servot1(int angle, uint8_t channel)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	460b      	mov	r3, r1
 80002fa:	70fb      	strb	r3, [r7, #3]
	if(angle<0)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	da01      	bge.n	8000306 <Servot1+0x16>
		angle = 0;
 8000302:	2300      	movs	r3, #0
 8000304:	607b      	str	r3, [r7, #4]
	if(angle>180)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	2bb4      	cmp	r3, #180	; 0xb4
 800030a:	dd01      	ble.n	8000310 <Servot1+0x20>
		angle = 180;
 800030c:	23b4      	movs	r3, #180	; 0xb4
 800030e:	607b      	str	r3, [r7, #4]
	angle = angle + 45;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	332d      	adds	r3, #45	; 0x2d
 8000314:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim1, channel, angle);
 8000316:	78fb      	ldrb	r3, [r7, #3]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d104      	bne.n	8000326 <Servot1+0x36>
 800031c:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <Servot1+0x68>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	687a      	ldr	r2, [r7, #4]
 8000322:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000324:	e013      	b.n	800034e <Servot1+0x5e>
	__HAL_TIM_SET_COMPARE(&htim1, channel, angle);
 8000326:	78fb      	ldrb	r3, [r7, #3]
 8000328:	2b04      	cmp	r3, #4
 800032a:	d104      	bne.n	8000336 <Servot1+0x46>
 800032c:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <Servot1+0x68>)
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000334:	e00b      	b.n	800034e <Servot1+0x5e>
	__HAL_TIM_SET_COMPARE(&htim1, channel, angle);
 8000336:	78fb      	ldrb	r3, [r7, #3]
 8000338:	2b08      	cmp	r3, #8
 800033a:	d104      	bne.n	8000346 <Servot1+0x56>
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <Servot1+0x68>)
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000344:	e003      	b.n	800034e <Servot1+0x5e>
	__HAL_TIM_SET_COMPARE(&htim1, channel, angle);
 8000346:	4b04      	ldr	r3, [pc, #16]	; (8000358 <Servot1+0x68>)
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	200000c4 	.word	0x200000c4

0800035c <Servot2>:

void Servot2(int angle, uint8_t channel)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	460b      	mov	r3, r1
 8000366:	70fb      	strb	r3, [r7, #3]
	if(angle<0)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2b00      	cmp	r3, #0
 800036c:	da01      	bge.n	8000372 <Servot2+0x16>
		angle = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	607b      	str	r3, [r7, #4]
	if(angle>180)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	2bb4      	cmp	r3, #180	; 0xb4
 8000376:	dd01      	ble.n	800037c <Servot2+0x20>
		angle = 180;
 8000378:	23b4      	movs	r3, #180	; 0xb4
 800037a:	607b      	str	r3, [r7, #4]
	angle = angle + 45;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	332d      	adds	r3, #45	; 0x2d
 8000380:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim2, channel, angle);
 8000382:	78fb      	ldrb	r3, [r7, #3]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d104      	bne.n	8000392 <Servot2+0x36>
 8000388:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <Servot2+0x68>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	687a      	ldr	r2, [r7, #4]
 800038e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000390:	e013      	b.n	80003ba <Servot2+0x5e>
	__HAL_TIM_SET_COMPARE(&htim2, channel, angle);
 8000392:	78fb      	ldrb	r3, [r7, #3]
 8000394:	2b04      	cmp	r3, #4
 8000396:	d104      	bne.n	80003a2 <Servot2+0x46>
 8000398:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <Servot2+0x68>)
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	6393      	str	r3, [r2, #56]	; 0x38
}
 80003a0:	e00b      	b.n	80003ba <Servot2+0x5e>
	__HAL_TIM_SET_COMPARE(&htim2, channel, angle);
 80003a2:	78fb      	ldrb	r3, [r7, #3]
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d104      	bne.n	80003b2 <Servot2+0x56>
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <Servot2+0x68>)
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80003b0:	e003      	b.n	80003ba <Servot2+0x5e>
	__HAL_TIM_SET_COMPARE(&htim2, channel, angle);
 80003b2:	4b04      	ldr	r3, [pc, #16]	; (80003c4 <Servot2+0x68>)
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	2000010c 	.word	0x2000010c

080003c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003cc:	f000 ffa4 	bl	8001318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003d0:	f000 fc16 	bl	8000c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d4:	f000 fdb0 	bl	8000f38 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80003d8:	f000 fd84 	bl	8000ee4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80003dc:	f000 fc84 	bl	8000ce8 <MX_TIM1_Init>
  MX_I2C1_Init();
 80003e0:	f000 fc54 	bl	8000c8c <MX_I2C1_Init>
  MX_TIM2_Init();
 80003e4:	f000 fd04 	bl	8000df0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80003e8:	2100      	movs	r1, #0
 80003ea:	48d4      	ldr	r0, [pc, #848]	; (800073c <main+0x374>)
 80003ec:	f002 fc10 	bl	8002c10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80003f0:	2100      	movs	r1, #0
 80003f2:	48d3      	ldr	r0, [pc, #844]	; (8000740 <main+0x378>)
 80003f4:	f002 fc0c 	bl	8002c10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80003f8:	2104      	movs	r1, #4
 80003fa:	48d1      	ldr	r0, [pc, #836]	; (8000740 <main+0x378>)
 80003fc:	f002 fc08 	bl	8002c10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000400:	2108      	movs	r1, #8
 8000402:	48cf      	ldr	r0, [pc, #828]	; (8000740 <main+0x378>)
 8000404:	f002 fc04 	bl	8002c10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000408:	210c      	movs	r1, #12
 800040a:	48cd      	ldr	r0, [pc, #820]	; (8000740 <main+0x378>)
 800040c:	f002 fc00 	bl	8002c10 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 8000410:	2201      	movs	r2, #1
 8000412:	49cc      	ldr	r1, [pc, #816]	; (8000744 <main+0x37c>)
 8000414:	48cc      	ldr	r0, [pc, #816]	; (8000748 <main+0x380>)
 8000416:	f003 f865 	bl	80034e4 <HAL_UART_Receive_IT>
  lcd_init ();
 800041a:	f7ff ff16 	bl	800024a <lcd_init>
  lcd_send_string("BIONIC HAND v1.0");
 800041e:	48cb      	ldr	r0, [pc, #812]	; (800074c <main+0x384>)
 8000420:	f7ff ff50 	bl	80002c4 <lcd_send_string>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_put_cur(1, 0);
 8000424:	2100      	movs	r1, #0
 8000426:	2001      	movs	r0, #1
 8000428:	f7ff fef0 	bl	800020c <lcd_put_cur>
	      /* USER CODE END WHILE */
	  if(RX_BUFFER[0] == '0'){lcd_send_string("[0, 0, 0, 0, 0]");Servot1(0, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_2);Servot2(0, TIM_CHANNEL_3);Servot2(0, TIM_CHANNEL_4);}
 800042c:	4bc5      	ldr	r3, [pc, #788]	; (8000744 <main+0x37c>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b30      	cmp	r3, #48	; 0x30
 8000432:	d117      	bne.n	8000464 <main+0x9c>
 8000434:	48c6      	ldr	r0, [pc, #792]	; (8000750 <main+0x388>)
 8000436:	f7ff ff45 	bl	80002c4 <lcd_send_string>
 800043a:	2100      	movs	r1, #0
 800043c:	2000      	movs	r0, #0
 800043e:	f7ff ff57 	bl	80002f0 <Servot1>
 8000442:	2100      	movs	r1, #0
 8000444:	2000      	movs	r0, #0
 8000446:	f7ff ff89 	bl	800035c <Servot2>
 800044a:	2104      	movs	r1, #4
 800044c:	2000      	movs	r0, #0
 800044e:	f7ff ff85 	bl	800035c <Servot2>
 8000452:	2108      	movs	r1, #8
 8000454:	2000      	movs	r0, #0
 8000456:	f7ff ff81 	bl	800035c <Servot2>
 800045a:	210c      	movs	r1, #12
 800045c:	2000      	movs	r0, #0
 800045e:	f7ff ff7d 	bl	800035c <Servot2>
 8000462:	e7df      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == '1'){lcd_send_string("[1, 1, 1, 1, 1]");Servot1(90, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_2);Servot2(90, TIM_CHANNEL_3);Servot2(90, TIM_CHANNEL_4);}
 8000464:	4bb7      	ldr	r3, [pc, #732]	; (8000744 <main+0x37c>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b31      	cmp	r3, #49	; 0x31
 800046a:	d117      	bne.n	800049c <main+0xd4>
 800046c:	48b9      	ldr	r0, [pc, #740]	; (8000754 <main+0x38c>)
 800046e:	f7ff ff29 	bl	80002c4 <lcd_send_string>
 8000472:	2100      	movs	r1, #0
 8000474:	205a      	movs	r0, #90	; 0x5a
 8000476:	f7ff ff3b 	bl	80002f0 <Servot1>
 800047a:	2100      	movs	r1, #0
 800047c:	205a      	movs	r0, #90	; 0x5a
 800047e:	f7ff ff6d 	bl	800035c <Servot2>
 8000482:	2104      	movs	r1, #4
 8000484:	205a      	movs	r0, #90	; 0x5a
 8000486:	f7ff ff69 	bl	800035c <Servot2>
 800048a:	2108      	movs	r1, #8
 800048c:	205a      	movs	r0, #90	; 0x5a
 800048e:	f7ff ff65 	bl	800035c <Servot2>
 8000492:	210c      	movs	r1, #12
 8000494:	205a      	movs	r0, #90	; 0x5a
 8000496:	f7ff ff61 	bl	800035c <Servot2>
 800049a:	e7c3      	b.n	8000424 <main+0x5c>

	  //////////////////////////////

	  else if(RX_BUFFER[0] == 'q'){lcd_send_string("[1, 0, 0, 0, 0]");Servot1(90, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_2);Servot2(0, TIM_CHANNEL_3);Servot2(0, TIM_CHANNEL_4);}
 800049c:	4ba9      	ldr	r3, [pc, #676]	; (8000744 <main+0x37c>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b71      	cmp	r3, #113	; 0x71
 80004a2:	d117      	bne.n	80004d4 <main+0x10c>
 80004a4:	48ac      	ldr	r0, [pc, #688]	; (8000758 <main+0x390>)
 80004a6:	f7ff ff0d 	bl	80002c4 <lcd_send_string>
 80004aa:	2100      	movs	r1, #0
 80004ac:	205a      	movs	r0, #90	; 0x5a
 80004ae:	f7ff ff1f 	bl	80002f0 <Servot1>
 80004b2:	2100      	movs	r1, #0
 80004b4:	2000      	movs	r0, #0
 80004b6:	f7ff ff51 	bl	800035c <Servot2>
 80004ba:	2104      	movs	r1, #4
 80004bc:	2000      	movs	r0, #0
 80004be:	f7ff ff4d 	bl	800035c <Servot2>
 80004c2:	2108      	movs	r1, #8
 80004c4:	2000      	movs	r0, #0
 80004c6:	f7ff ff49 	bl	800035c <Servot2>
 80004ca:	210c      	movs	r1, #12
 80004cc:	2000      	movs	r0, #0
 80004ce:	f7ff ff45 	bl	800035c <Servot2>
 80004d2:	e7a7      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == 'w'){lcd_send_string("[0, 1, 0, 0, 0]");Servot1(0, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_2);Servot2(0, TIM_CHANNEL_3);Servot2(0, TIM_CHANNEL_4);}
 80004d4:	4b9b      	ldr	r3, [pc, #620]	; (8000744 <main+0x37c>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b77      	cmp	r3, #119	; 0x77
 80004da:	d117      	bne.n	800050c <main+0x144>
 80004dc:	489f      	ldr	r0, [pc, #636]	; (800075c <main+0x394>)
 80004de:	f7ff fef1 	bl	80002c4 <lcd_send_string>
 80004e2:	2100      	movs	r1, #0
 80004e4:	2000      	movs	r0, #0
 80004e6:	f7ff ff03 	bl	80002f0 <Servot1>
 80004ea:	2100      	movs	r1, #0
 80004ec:	205a      	movs	r0, #90	; 0x5a
 80004ee:	f7ff ff35 	bl	800035c <Servot2>
 80004f2:	2104      	movs	r1, #4
 80004f4:	2000      	movs	r0, #0
 80004f6:	f7ff ff31 	bl	800035c <Servot2>
 80004fa:	2108      	movs	r1, #8
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff ff2d 	bl	800035c <Servot2>
 8000502:	210c      	movs	r1, #12
 8000504:	2000      	movs	r0, #0
 8000506:	f7ff ff29 	bl	800035c <Servot2>
 800050a:	e78b      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == '6'){lcd_send_string("[0, 0, 1, 0, 0]");Servot1(0, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_2);Servot2(0, TIM_CHANNEL_3);Servot2(0, TIM_CHANNEL_4);}
 800050c:	4b8d      	ldr	r3, [pc, #564]	; (8000744 <main+0x37c>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b36      	cmp	r3, #54	; 0x36
 8000512:	d117      	bne.n	8000544 <main+0x17c>
 8000514:	4892      	ldr	r0, [pc, #584]	; (8000760 <main+0x398>)
 8000516:	f7ff fed5 	bl	80002c4 <lcd_send_string>
 800051a:	2100      	movs	r1, #0
 800051c:	2000      	movs	r0, #0
 800051e:	f7ff fee7 	bl	80002f0 <Servot1>
 8000522:	2100      	movs	r1, #0
 8000524:	2000      	movs	r0, #0
 8000526:	f7ff ff19 	bl	800035c <Servot2>
 800052a:	2104      	movs	r1, #4
 800052c:	205a      	movs	r0, #90	; 0x5a
 800052e:	f7ff ff15 	bl	800035c <Servot2>
 8000532:	2108      	movs	r1, #8
 8000534:	2000      	movs	r0, #0
 8000536:	f7ff ff11 	bl	800035c <Servot2>
 800053a:	210c      	movs	r1, #12
 800053c:	2000      	movs	r0, #0
 800053e:	f7ff ff0d 	bl	800035c <Servot2>
 8000542:	e76f      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == 'r'){lcd_send_string("[0, 0, 0, 1, 0]");Servot1(0, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_2);Servot2(90, TIM_CHANNEL_3);Servot2(0, TIM_CHANNEL_4);}
 8000544:	4b7f      	ldr	r3, [pc, #508]	; (8000744 <main+0x37c>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b72      	cmp	r3, #114	; 0x72
 800054a:	d117      	bne.n	800057c <main+0x1b4>
 800054c:	4885      	ldr	r0, [pc, #532]	; (8000764 <main+0x39c>)
 800054e:	f7ff feb9 	bl	80002c4 <lcd_send_string>
 8000552:	2100      	movs	r1, #0
 8000554:	2000      	movs	r0, #0
 8000556:	f7ff fecb 	bl	80002f0 <Servot1>
 800055a:	2100      	movs	r1, #0
 800055c:	2000      	movs	r0, #0
 800055e:	f7ff fefd 	bl	800035c <Servot2>
 8000562:	2104      	movs	r1, #4
 8000564:	2000      	movs	r0, #0
 8000566:	f7ff fef9 	bl	800035c <Servot2>
 800056a:	2108      	movs	r1, #8
 800056c:	205a      	movs	r0, #90	; 0x5a
 800056e:	f7ff fef5 	bl	800035c <Servot2>
 8000572:	210c      	movs	r1, #12
 8000574:	2000      	movs	r0, #0
 8000576:	f7ff fef1 	bl	800035c <Servot2>
 800057a:	e753      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == 't'){lcd_send_string("[0, 0, 0, 0, 1]");Servot1(0, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_2);Servot2(0, TIM_CHANNEL_3);Servot2(90, TIM_CHANNEL_4);}
 800057c:	4b71      	ldr	r3, [pc, #452]	; (8000744 <main+0x37c>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b74      	cmp	r3, #116	; 0x74
 8000582:	d117      	bne.n	80005b4 <main+0x1ec>
 8000584:	4878      	ldr	r0, [pc, #480]	; (8000768 <main+0x3a0>)
 8000586:	f7ff fe9d 	bl	80002c4 <lcd_send_string>
 800058a:	2100      	movs	r1, #0
 800058c:	2000      	movs	r0, #0
 800058e:	f7ff feaf 	bl	80002f0 <Servot1>
 8000592:	2100      	movs	r1, #0
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff fee1 	bl	800035c <Servot2>
 800059a:	2104      	movs	r1, #4
 800059c:	2000      	movs	r0, #0
 800059e:	f7ff fedd 	bl	800035c <Servot2>
 80005a2:	2108      	movs	r1, #8
 80005a4:	2000      	movs	r0, #0
 80005a6:	f7ff fed9 	bl	800035c <Servot2>
 80005aa:	210c      	movs	r1, #12
 80005ac:	205a      	movs	r0, #90	; 0x5a
 80005ae:	f7ff fed5 	bl	800035c <Servot2>
 80005b2:	e737      	b.n	8000424 <main+0x5c>

	  //////////////////////////////

	  else if(RX_BUFFER[0] == 'y'){lcd_send_string("[0, 1, 1, 1, 1]");Servot1(0, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_2);Servot2(90, TIM_CHANNEL_3);Servot2(90, TIM_CHANNEL_4);}
 80005b4:	4b63      	ldr	r3, [pc, #396]	; (8000744 <main+0x37c>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b79      	cmp	r3, #121	; 0x79
 80005ba:	d117      	bne.n	80005ec <main+0x224>
 80005bc:	486b      	ldr	r0, [pc, #428]	; (800076c <main+0x3a4>)
 80005be:	f7ff fe81 	bl	80002c4 <lcd_send_string>
 80005c2:	2100      	movs	r1, #0
 80005c4:	2000      	movs	r0, #0
 80005c6:	f7ff fe93 	bl	80002f0 <Servot1>
 80005ca:	2100      	movs	r1, #0
 80005cc:	205a      	movs	r0, #90	; 0x5a
 80005ce:	f7ff fec5 	bl	800035c <Servot2>
 80005d2:	2104      	movs	r1, #4
 80005d4:	205a      	movs	r0, #90	; 0x5a
 80005d6:	f7ff fec1 	bl	800035c <Servot2>
 80005da:	2108      	movs	r1, #8
 80005dc:	205a      	movs	r0, #90	; 0x5a
 80005de:	f7ff febd 	bl	800035c <Servot2>
 80005e2:	210c      	movs	r1, #12
 80005e4:	205a      	movs	r0, #90	; 0x5a
 80005e6:	f7ff feb9 	bl	800035c <Servot2>
 80005ea:	e71b      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == 'u'){lcd_send_string("[1, 0, 1, 1, 1]");Servot1(90, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_2);Servot2(90, TIM_CHANNEL_3);Servot2(90, TIM_CHANNEL_4);}
 80005ec:	4b55      	ldr	r3, [pc, #340]	; (8000744 <main+0x37c>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b75      	cmp	r3, #117	; 0x75
 80005f2:	d117      	bne.n	8000624 <main+0x25c>
 80005f4:	485e      	ldr	r0, [pc, #376]	; (8000770 <main+0x3a8>)
 80005f6:	f7ff fe65 	bl	80002c4 <lcd_send_string>
 80005fa:	2100      	movs	r1, #0
 80005fc:	205a      	movs	r0, #90	; 0x5a
 80005fe:	f7ff fe77 	bl	80002f0 <Servot1>
 8000602:	2100      	movs	r1, #0
 8000604:	2000      	movs	r0, #0
 8000606:	f7ff fea9 	bl	800035c <Servot2>
 800060a:	2104      	movs	r1, #4
 800060c:	205a      	movs	r0, #90	; 0x5a
 800060e:	f7ff fea5 	bl	800035c <Servot2>
 8000612:	2108      	movs	r1, #8
 8000614:	205a      	movs	r0, #90	; 0x5a
 8000616:	f7ff fea1 	bl	800035c <Servot2>
 800061a:	210c      	movs	r1, #12
 800061c:	205a      	movs	r0, #90	; 0x5a
 800061e:	f7ff fe9d 	bl	800035c <Servot2>
 8000622:	e6ff      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == 'i'){lcd_send_string("[1, 1, 0, 1, 1]");Servot1(90, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_2);Servot2(90, TIM_CHANNEL_3);Servot2(90, TIM_CHANNEL_4);}
 8000624:	4b47      	ldr	r3, [pc, #284]	; (8000744 <main+0x37c>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b69      	cmp	r3, #105	; 0x69
 800062a:	d117      	bne.n	800065c <main+0x294>
 800062c:	4851      	ldr	r0, [pc, #324]	; (8000774 <main+0x3ac>)
 800062e:	f7ff fe49 	bl	80002c4 <lcd_send_string>
 8000632:	2100      	movs	r1, #0
 8000634:	205a      	movs	r0, #90	; 0x5a
 8000636:	f7ff fe5b 	bl	80002f0 <Servot1>
 800063a:	2100      	movs	r1, #0
 800063c:	205a      	movs	r0, #90	; 0x5a
 800063e:	f7ff fe8d 	bl	800035c <Servot2>
 8000642:	2104      	movs	r1, #4
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff fe89 	bl	800035c <Servot2>
 800064a:	2108      	movs	r1, #8
 800064c:	205a      	movs	r0, #90	; 0x5a
 800064e:	f7ff fe85 	bl	800035c <Servot2>
 8000652:	210c      	movs	r1, #12
 8000654:	205a      	movs	r0, #90	; 0x5a
 8000656:	f7ff fe81 	bl	800035c <Servot2>
 800065a:	e6e3      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == 'o'){lcd_send_string("[1, 1, 1, 0, 1]");Servot1(90, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_2);Servot2(0, TIM_CHANNEL_3);Servot2(90, TIM_CHANNEL_4);}
 800065c:	4b39      	ldr	r3, [pc, #228]	; (8000744 <main+0x37c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b6f      	cmp	r3, #111	; 0x6f
 8000662:	d117      	bne.n	8000694 <main+0x2cc>
 8000664:	4844      	ldr	r0, [pc, #272]	; (8000778 <main+0x3b0>)
 8000666:	f7ff fe2d 	bl	80002c4 <lcd_send_string>
 800066a:	2100      	movs	r1, #0
 800066c:	205a      	movs	r0, #90	; 0x5a
 800066e:	f7ff fe3f 	bl	80002f0 <Servot1>
 8000672:	2100      	movs	r1, #0
 8000674:	205a      	movs	r0, #90	; 0x5a
 8000676:	f7ff fe71 	bl	800035c <Servot2>
 800067a:	2104      	movs	r1, #4
 800067c:	205a      	movs	r0, #90	; 0x5a
 800067e:	f7ff fe6d 	bl	800035c <Servot2>
 8000682:	2108      	movs	r1, #8
 8000684:	2000      	movs	r0, #0
 8000686:	f7ff fe69 	bl	800035c <Servot2>
 800068a:	210c      	movs	r1, #12
 800068c:	205a      	movs	r0, #90	; 0x5a
 800068e:	f7ff fe65 	bl	800035c <Servot2>
 8000692:	e6c7      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == 'p'){lcd_send_string("[1, 1, 1, 1, 0]");Servot1(90, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_2);Servot2(90, TIM_CHANNEL_3);Servot2(0, TIM_CHANNEL_4);}
 8000694:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <main+0x37c>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b70      	cmp	r3, #112	; 0x70
 800069a:	d117      	bne.n	80006cc <main+0x304>
 800069c:	4837      	ldr	r0, [pc, #220]	; (800077c <main+0x3b4>)
 800069e:	f7ff fe11 	bl	80002c4 <lcd_send_string>
 80006a2:	2100      	movs	r1, #0
 80006a4:	205a      	movs	r0, #90	; 0x5a
 80006a6:	f7ff fe23 	bl	80002f0 <Servot1>
 80006aa:	2100      	movs	r1, #0
 80006ac:	205a      	movs	r0, #90	; 0x5a
 80006ae:	f7ff fe55 	bl	800035c <Servot2>
 80006b2:	2104      	movs	r1, #4
 80006b4:	205a      	movs	r0, #90	; 0x5a
 80006b6:	f7ff fe51 	bl	800035c <Servot2>
 80006ba:	2108      	movs	r1, #8
 80006bc:	205a      	movs	r0, #90	; 0x5a
 80006be:	f7ff fe4d 	bl	800035c <Servot2>
 80006c2:	210c      	movs	r1, #12
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff fe49 	bl	800035c <Servot2>
 80006ca:	e6ab      	b.n	8000424 <main+0x5c>

	  //////////////////////////////

	  else if(RX_BUFFER[0] == 'a'){lcd_send_string("[1, 1, 0, 0, 0]");Servot1(90, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_2);Servot2(0, TIM_CHANNEL_3);Servot2(0, TIM_CHANNEL_4);}
 80006cc:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <main+0x37c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b61      	cmp	r3, #97	; 0x61
 80006d2:	d117      	bne.n	8000704 <main+0x33c>
 80006d4:	482a      	ldr	r0, [pc, #168]	; (8000780 <main+0x3b8>)
 80006d6:	f7ff fdf5 	bl	80002c4 <lcd_send_string>
 80006da:	2100      	movs	r1, #0
 80006dc:	205a      	movs	r0, #90	; 0x5a
 80006de:	f7ff fe07 	bl	80002f0 <Servot1>
 80006e2:	2100      	movs	r1, #0
 80006e4:	205a      	movs	r0, #90	; 0x5a
 80006e6:	f7ff fe39 	bl	800035c <Servot2>
 80006ea:	2104      	movs	r1, #4
 80006ec:	2000      	movs	r0, #0
 80006ee:	f7ff fe35 	bl	800035c <Servot2>
 80006f2:	2108      	movs	r1, #8
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff fe31 	bl	800035c <Servot2>
 80006fa:	210c      	movs	r1, #12
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff fe2d 	bl	800035c <Servot2>
 8000702:	e68f      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == 's'){lcd_send_string("[0, 1, 1, 0, 0]");Servot1(0, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_2);Servot2(0, TIM_CHANNEL_3);Servot2(0, TIM_CHANNEL_4);}
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <main+0x37c>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b73      	cmp	r3, #115	; 0x73
 800070a:	d13d      	bne.n	8000788 <main+0x3c0>
 800070c:	481d      	ldr	r0, [pc, #116]	; (8000784 <main+0x3bc>)
 800070e:	f7ff fdd9 	bl	80002c4 <lcd_send_string>
 8000712:	2100      	movs	r1, #0
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff fdeb 	bl	80002f0 <Servot1>
 800071a:	2100      	movs	r1, #0
 800071c:	205a      	movs	r0, #90	; 0x5a
 800071e:	f7ff fe1d 	bl	800035c <Servot2>
 8000722:	2104      	movs	r1, #4
 8000724:	205a      	movs	r0, #90	; 0x5a
 8000726:	f7ff fe19 	bl	800035c <Servot2>
 800072a:	2108      	movs	r1, #8
 800072c:	2000      	movs	r0, #0
 800072e:	f7ff fe15 	bl	800035c <Servot2>
 8000732:	210c      	movs	r1, #12
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff fe11 	bl	800035c <Servot2>
 800073a:	e673      	b.n	8000424 <main+0x5c>
 800073c:	200000c4 	.word	0x200000c4
 8000740:	2000010c 	.word	0x2000010c
 8000744:	20000028 	.word	0x20000028
 8000748:	20000080 	.word	0x20000080
 800074c:	08003d70 	.word	0x08003d70
 8000750:	08003d84 	.word	0x08003d84
 8000754:	08003d94 	.word	0x08003d94
 8000758:	08003da4 	.word	0x08003da4
 800075c:	08003db4 	.word	0x08003db4
 8000760:	08003dc4 	.word	0x08003dc4
 8000764:	08003dd4 	.word	0x08003dd4
 8000768:	08003de4 	.word	0x08003de4
 800076c:	08003df4 	.word	0x08003df4
 8000770:	08003e04 	.word	0x08003e04
 8000774:	08003e14 	.word	0x08003e14
 8000778:	08003e24 	.word	0x08003e24
 800077c:	08003e34 	.word	0x08003e34
 8000780:	08003e44 	.word	0x08003e44
 8000784:	08003e54 	.word	0x08003e54
	  else if(RX_BUFFER[0] == 'd'){lcd_send_string("[0, 0, 1, 1, 0]");Servot1(0, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_2);Servot2(90, TIM_CHANNEL_3);Servot2(0, TIM_CHANNEL_4);}
 8000788:	4bd1      	ldr	r3, [pc, #836]	; (8000ad0 <main+0x708>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b64      	cmp	r3, #100	; 0x64
 800078e:	d117      	bne.n	80007c0 <main+0x3f8>
 8000790:	48d0      	ldr	r0, [pc, #832]	; (8000ad4 <main+0x70c>)
 8000792:	f7ff fd97 	bl	80002c4 <lcd_send_string>
 8000796:	2100      	movs	r1, #0
 8000798:	2000      	movs	r0, #0
 800079a:	f7ff fda9 	bl	80002f0 <Servot1>
 800079e:	2100      	movs	r1, #0
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff fddb 	bl	800035c <Servot2>
 80007a6:	2104      	movs	r1, #4
 80007a8:	205a      	movs	r0, #90	; 0x5a
 80007aa:	f7ff fdd7 	bl	800035c <Servot2>
 80007ae:	2108      	movs	r1, #8
 80007b0:	205a      	movs	r0, #90	; 0x5a
 80007b2:	f7ff fdd3 	bl	800035c <Servot2>
 80007b6:	210c      	movs	r1, #12
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff fdcf 	bl	800035c <Servot2>
 80007be:	e631      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == 'f'){lcd_send_string("[0, 0, 0, 1, 1]");Servot1(0, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_2);Servot2(90, TIM_CHANNEL_3);Servot2(90, TIM_CHANNEL_4);}
 80007c0:	4bc3      	ldr	r3, [pc, #780]	; (8000ad0 <main+0x708>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b66      	cmp	r3, #102	; 0x66
 80007c6:	d117      	bne.n	80007f8 <main+0x430>
 80007c8:	48c3      	ldr	r0, [pc, #780]	; (8000ad8 <main+0x710>)
 80007ca:	f7ff fd7b 	bl	80002c4 <lcd_send_string>
 80007ce:	2100      	movs	r1, #0
 80007d0:	2000      	movs	r0, #0
 80007d2:	f7ff fd8d 	bl	80002f0 <Servot1>
 80007d6:	2100      	movs	r1, #0
 80007d8:	2000      	movs	r0, #0
 80007da:	f7ff fdbf 	bl	800035c <Servot2>
 80007de:	2104      	movs	r1, #4
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff fdbb 	bl	800035c <Servot2>
 80007e6:	2108      	movs	r1, #8
 80007e8:	205a      	movs	r0, #90	; 0x5a
 80007ea:	f7ff fdb7 	bl	800035c <Servot2>
 80007ee:	210c      	movs	r1, #12
 80007f0:	205a      	movs	r0, #90	; 0x5a
 80007f2:	f7ff fdb3 	bl	800035c <Servot2>
 80007f6:	e615      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == 'g'){lcd_send_string("[1, 0, 0, 0, 1]");Servot1(90, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_2);Servot2(0, TIM_CHANNEL_3);Servot2(90, TIM_CHANNEL_4);}
 80007f8:	4bb5      	ldr	r3, [pc, #724]	; (8000ad0 <main+0x708>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b67      	cmp	r3, #103	; 0x67
 80007fe:	d117      	bne.n	8000830 <main+0x468>
 8000800:	48b6      	ldr	r0, [pc, #728]	; (8000adc <main+0x714>)
 8000802:	f7ff fd5f 	bl	80002c4 <lcd_send_string>
 8000806:	2100      	movs	r1, #0
 8000808:	205a      	movs	r0, #90	; 0x5a
 800080a:	f7ff fd71 	bl	80002f0 <Servot1>
 800080e:	2100      	movs	r1, #0
 8000810:	2000      	movs	r0, #0
 8000812:	f7ff fda3 	bl	800035c <Servot2>
 8000816:	2104      	movs	r1, #4
 8000818:	2000      	movs	r0, #0
 800081a:	f7ff fd9f 	bl	800035c <Servot2>
 800081e:	2108      	movs	r1, #8
 8000820:	2000      	movs	r0, #0
 8000822:	f7ff fd9b 	bl	800035c <Servot2>
 8000826:	210c      	movs	r1, #12
 8000828:	205a      	movs	r0, #90	; 0x5a
 800082a:	f7ff fd97 	bl	800035c <Servot2>
 800082e:	e5f9      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == 'h'){lcd_send_string("[1, 0, 0, 1, 0]");Servot1(90, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_2);Servot2(90, TIM_CHANNEL_3);Servot2(0, TIM_CHANNEL_4);}
 8000830:	4ba7      	ldr	r3, [pc, #668]	; (8000ad0 <main+0x708>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b68      	cmp	r3, #104	; 0x68
 8000836:	d117      	bne.n	8000868 <main+0x4a0>
 8000838:	48a9      	ldr	r0, [pc, #676]	; (8000ae0 <main+0x718>)
 800083a:	f7ff fd43 	bl	80002c4 <lcd_send_string>
 800083e:	2100      	movs	r1, #0
 8000840:	205a      	movs	r0, #90	; 0x5a
 8000842:	f7ff fd55 	bl	80002f0 <Servot1>
 8000846:	2100      	movs	r1, #0
 8000848:	2000      	movs	r0, #0
 800084a:	f7ff fd87 	bl	800035c <Servot2>
 800084e:	2104      	movs	r1, #4
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff fd83 	bl	800035c <Servot2>
 8000856:	2108      	movs	r1, #8
 8000858:	205a      	movs	r0, #90	; 0x5a
 800085a:	f7ff fd7f 	bl	800035c <Servot2>
 800085e:	210c      	movs	r1, #12
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fd7b 	bl	800035c <Servot2>
 8000866:	e5dd      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == 'j'){lcd_send_string("[1, 0, 1, 0, 0]");Servot1(90, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_2);Servot2(0, TIM_CHANNEL_3);Servot2(0, TIM_CHANNEL_4);}
 8000868:	4b99      	ldr	r3, [pc, #612]	; (8000ad0 <main+0x708>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b6a      	cmp	r3, #106	; 0x6a
 800086e:	d117      	bne.n	80008a0 <main+0x4d8>
 8000870:	489c      	ldr	r0, [pc, #624]	; (8000ae4 <main+0x71c>)
 8000872:	f7ff fd27 	bl	80002c4 <lcd_send_string>
 8000876:	2100      	movs	r1, #0
 8000878:	205a      	movs	r0, #90	; 0x5a
 800087a:	f7ff fd39 	bl	80002f0 <Servot1>
 800087e:	2100      	movs	r1, #0
 8000880:	2000      	movs	r0, #0
 8000882:	f7ff fd6b 	bl	800035c <Servot2>
 8000886:	2104      	movs	r1, #4
 8000888:	205a      	movs	r0, #90	; 0x5a
 800088a:	f7ff fd67 	bl	800035c <Servot2>
 800088e:	2108      	movs	r1, #8
 8000890:	2000      	movs	r0, #0
 8000892:	f7ff fd63 	bl	800035c <Servot2>
 8000896:	210c      	movs	r1, #12
 8000898:	2000      	movs	r0, #0
 800089a:	f7ff fd5f 	bl	800035c <Servot2>
 800089e:	e5c1      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == 'k'){lcd_send_string("[0, 1, 0, 1, 0]");Servot1(0, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_2);Servot2(90, TIM_CHANNEL_3);Servot2(0, TIM_CHANNEL_4);}
 80008a0:	4b8b      	ldr	r3, [pc, #556]	; (8000ad0 <main+0x708>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b6b      	cmp	r3, #107	; 0x6b
 80008a6:	d117      	bne.n	80008d8 <main+0x510>
 80008a8:	488f      	ldr	r0, [pc, #572]	; (8000ae8 <main+0x720>)
 80008aa:	f7ff fd0b 	bl	80002c4 <lcd_send_string>
 80008ae:	2100      	movs	r1, #0
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff fd1d 	bl	80002f0 <Servot1>
 80008b6:	2100      	movs	r1, #0
 80008b8:	205a      	movs	r0, #90	; 0x5a
 80008ba:	f7ff fd4f 	bl	800035c <Servot2>
 80008be:	2104      	movs	r1, #4
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff fd4b 	bl	800035c <Servot2>
 80008c6:	2108      	movs	r1, #8
 80008c8:	205a      	movs	r0, #90	; 0x5a
 80008ca:	f7ff fd47 	bl	800035c <Servot2>
 80008ce:	210c      	movs	r1, #12
 80008d0:	2000      	movs	r0, #0
 80008d2:	f7ff fd43 	bl	800035c <Servot2>
 80008d6:	e5a5      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == 'l'){lcd_send_string("[0, 1, 0, 0, 1]");Servot1(0, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_2);Servot2(0, TIM_CHANNEL_3);Servot2(90, TIM_CHANNEL_4);}
 80008d8:	4b7d      	ldr	r3, [pc, #500]	; (8000ad0 <main+0x708>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b6c      	cmp	r3, #108	; 0x6c
 80008de:	d117      	bne.n	8000910 <main+0x548>
 80008e0:	4882      	ldr	r0, [pc, #520]	; (8000aec <main+0x724>)
 80008e2:	f7ff fcef 	bl	80002c4 <lcd_send_string>
 80008e6:	2100      	movs	r1, #0
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff fd01 	bl	80002f0 <Servot1>
 80008ee:	2100      	movs	r1, #0
 80008f0:	205a      	movs	r0, #90	; 0x5a
 80008f2:	f7ff fd33 	bl	800035c <Servot2>
 80008f6:	2104      	movs	r1, #4
 80008f8:	2000      	movs	r0, #0
 80008fa:	f7ff fd2f 	bl	800035c <Servot2>
 80008fe:	2108      	movs	r1, #8
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff fd2b 	bl	800035c <Servot2>
 8000906:	210c      	movs	r1, #12
 8000908:	205a      	movs	r0, #90	; 0x5a
 800090a:	f7ff fd27 	bl	800035c <Servot2>
 800090e:	e589      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == 'z'){lcd_send_string("[0, 0, 1, 0, 1]");Servot1(0, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_2);Servot2(0, TIM_CHANNEL_3);Servot2(90, TIM_CHANNEL_4);}
 8000910:	4b6f      	ldr	r3, [pc, #444]	; (8000ad0 <main+0x708>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b7a      	cmp	r3, #122	; 0x7a
 8000916:	d117      	bne.n	8000948 <main+0x580>
 8000918:	4875      	ldr	r0, [pc, #468]	; (8000af0 <main+0x728>)
 800091a:	f7ff fcd3 	bl	80002c4 <lcd_send_string>
 800091e:	2100      	movs	r1, #0
 8000920:	2000      	movs	r0, #0
 8000922:	f7ff fce5 	bl	80002f0 <Servot1>
 8000926:	2100      	movs	r1, #0
 8000928:	2000      	movs	r0, #0
 800092a:	f7ff fd17 	bl	800035c <Servot2>
 800092e:	2104      	movs	r1, #4
 8000930:	205a      	movs	r0, #90	; 0x5a
 8000932:	f7ff fd13 	bl	800035c <Servot2>
 8000936:	2108      	movs	r1, #8
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff fd0f 	bl	800035c <Servot2>
 800093e:	210c      	movs	r1, #12
 8000940:	205a      	movs	r0, #90	; 0x5a
 8000942:	f7ff fd0b 	bl	800035c <Servot2>
 8000946:	e56d      	b.n	8000424 <main+0x5c>

	  //////////////////////////////

	  else if(RX_BUFFER[0] == 'x'){lcd_send_string("[0, 0, 1, 1, 1]");Servot1(0, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_2);Servot2(90, TIM_CHANNEL_3);Servot2(90, TIM_CHANNEL_4);}
 8000948:	4b61      	ldr	r3, [pc, #388]	; (8000ad0 <main+0x708>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b78      	cmp	r3, #120	; 0x78
 800094e:	d117      	bne.n	8000980 <main+0x5b8>
 8000950:	4868      	ldr	r0, [pc, #416]	; (8000af4 <main+0x72c>)
 8000952:	f7ff fcb7 	bl	80002c4 <lcd_send_string>
 8000956:	2100      	movs	r1, #0
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff fcc9 	bl	80002f0 <Servot1>
 800095e:	2100      	movs	r1, #0
 8000960:	2000      	movs	r0, #0
 8000962:	f7ff fcfb 	bl	800035c <Servot2>
 8000966:	2104      	movs	r1, #4
 8000968:	205a      	movs	r0, #90	; 0x5a
 800096a:	f7ff fcf7 	bl	800035c <Servot2>
 800096e:	2108      	movs	r1, #8
 8000970:	205a      	movs	r0, #90	; 0x5a
 8000972:	f7ff fcf3 	bl	800035c <Servot2>
 8000976:	210c      	movs	r1, #12
 8000978:	205a      	movs	r0, #90	; 0x5a
 800097a:	f7ff fcef 	bl	800035c <Servot2>
 800097e:	e551      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == 'c'){lcd_send_string("[1, 0, 0, 1, 1]");Servot1(90, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_2);Servot2(90, TIM_CHANNEL_3);Servot2(90, TIM_CHANNEL_4);}
 8000980:	4b53      	ldr	r3, [pc, #332]	; (8000ad0 <main+0x708>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b63      	cmp	r3, #99	; 0x63
 8000986:	d117      	bne.n	80009b8 <main+0x5f0>
 8000988:	485b      	ldr	r0, [pc, #364]	; (8000af8 <main+0x730>)
 800098a:	f7ff fc9b 	bl	80002c4 <lcd_send_string>
 800098e:	2100      	movs	r1, #0
 8000990:	205a      	movs	r0, #90	; 0x5a
 8000992:	f7ff fcad 	bl	80002f0 <Servot1>
 8000996:	2100      	movs	r1, #0
 8000998:	2000      	movs	r0, #0
 800099a:	f7ff fcdf 	bl	800035c <Servot2>
 800099e:	2104      	movs	r1, #4
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff fcdb 	bl	800035c <Servot2>
 80009a6:	2108      	movs	r1, #8
 80009a8:	205a      	movs	r0, #90	; 0x5a
 80009aa:	f7ff fcd7 	bl	800035c <Servot2>
 80009ae:	210c      	movs	r1, #12
 80009b0:	205a      	movs	r0, #90	; 0x5a
 80009b2:	f7ff fcd3 	bl	800035c <Servot2>
 80009b6:	e535      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == 'v'){lcd_send_string("[1, 1, 0, 0, 1]");Servot1(90, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_2);Servot2(0, TIM_CHANNEL_3);Servot2(90, TIM_CHANNEL_4);}
 80009b8:	4b45      	ldr	r3, [pc, #276]	; (8000ad0 <main+0x708>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b76      	cmp	r3, #118	; 0x76
 80009be:	d117      	bne.n	80009f0 <main+0x628>
 80009c0:	484e      	ldr	r0, [pc, #312]	; (8000afc <main+0x734>)
 80009c2:	f7ff fc7f 	bl	80002c4 <lcd_send_string>
 80009c6:	2100      	movs	r1, #0
 80009c8:	205a      	movs	r0, #90	; 0x5a
 80009ca:	f7ff fc91 	bl	80002f0 <Servot1>
 80009ce:	2100      	movs	r1, #0
 80009d0:	205a      	movs	r0, #90	; 0x5a
 80009d2:	f7ff fcc3 	bl	800035c <Servot2>
 80009d6:	2104      	movs	r1, #4
 80009d8:	2000      	movs	r0, #0
 80009da:	f7ff fcbf 	bl	800035c <Servot2>
 80009de:	2108      	movs	r1, #8
 80009e0:	2000      	movs	r0, #0
 80009e2:	f7ff fcbb 	bl	800035c <Servot2>
 80009e6:	210c      	movs	r1, #12
 80009e8:	205a      	movs	r0, #90	; 0x5a
 80009ea:	f7ff fcb7 	bl	800035c <Servot2>
 80009ee:	e519      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == 'b'){lcd_send_string("[1, 1, 1, 0, 0]");Servot1(90, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_2);Servot2(0, TIM_CHANNEL_3);Servot2(0, TIM_CHANNEL_4);}
 80009f0:	4b37      	ldr	r3, [pc, #220]	; (8000ad0 <main+0x708>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b62      	cmp	r3, #98	; 0x62
 80009f6:	d117      	bne.n	8000a28 <main+0x660>
 80009f8:	4841      	ldr	r0, [pc, #260]	; (8000b00 <main+0x738>)
 80009fa:	f7ff fc63 	bl	80002c4 <lcd_send_string>
 80009fe:	2100      	movs	r1, #0
 8000a00:	205a      	movs	r0, #90	; 0x5a
 8000a02:	f7ff fc75 	bl	80002f0 <Servot1>
 8000a06:	2100      	movs	r1, #0
 8000a08:	205a      	movs	r0, #90	; 0x5a
 8000a0a:	f7ff fca7 	bl	800035c <Servot2>
 8000a0e:	2104      	movs	r1, #4
 8000a10:	205a      	movs	r0, #90	; 0x5a
 8000a12:	f7ff fca3 	bl	800035c <Servot2>
 8000a16:	2108      	movs	r1, #8
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f7ff fc9f 	bl	800035c <Servot2>
 8000a1e:	210c      	movs	r1, #12
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff fc9b 	bl	800035c <Servot2>
 8000a26:	e4fd      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == 'n'){lcd_send_string("[0, 1, 1, 1, 0]");Servot1(0, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_2);Servot2(90, TIM_CHANNEL_3);Servot2(0, TIM_CHANNEL_4);}
 8000a28:	4b29      	ldr	r3, [pc, #164]	; (8000ad0 <main+0x708>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b6e      	cmp	r3, #110	; 0x6e
 8000a2e:	d117      	bne.n	8000a60 <main+0x698>
 8000a30:	4834      	ldr	r0, [pc, #208]	; (8000b04 <main+0x73c>)
 8000a32:	f7ff fc47 	bl	80002c4 <lcd_send_string>
 8000a36:	2100      	movs	r1, #0
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f7ff fc59 	bl	80002f0 <Servot1>
 8000a3e:	2100      	movs	r1, #0
 8000a40:	205a      	movs	r0, #90	; 0x5a
 8000a42:	f7ff fc8b 	bl	800035c <Servot2>
 8000a46:	2104      	movs	r1, #4
 8000a48:	205a      	movs	r0, #90	; 0x5a
 8000a4a:	f7ff fc87 	bl	800035c <Servot2>
 8000a4e:	2108      	movs	r1, #8
 8000a50:	205a      	movs	r0, #90	; 0x5a
 8000a52:	f7ff fc83 	bl	800035c <Servot2>
 8000a56:	210c      	movs	r1, #12
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff fc7f 	bl	800035c <Servot2>
 8000a5e:	e4e1      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == 'm'){lcd_send_string("[0, 1, 1, 0, 1]");Servot1(0, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_2);Servot2(0, TIM_CHANNEL_3);Servot2(90, TIM_CHANNEL_4);}
 8000a60:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <main+0x708>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b6d      	cmp	r3, #109	; 0x6d
 8000a66:	d117      	bne.n	8000a98 <main+0x6d0>
 8000a68:	4827      	ldr	r0, [pc, #156]	; (8000b08 <main+0x740>)
 8000a6a:	f7ff fc2b 	bl	80002c4 <lcd_send_string>
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2000      	movs	r0, #0
 8000a72:	f7ff fc3d 	bl	80002f0 <Servot1>
 8000a76:	2100      	movs	r1, #0
 8000a78:	205a      	movs	r0, #90	; 0x5a
 8000a7a:	f7ff fc6f 	bl	800035c <Servot2>
 8000a7e:	2104      	movs	r1, #4
 8000a80:	205a      	movs	r0, #90	; 0x5a
 8000a82:	f7ff fc6b 	bl	800035c <Servot2>
 8000a86:	2108      	movs	r1, #8
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff fc67 	bl	800035c <Servot2>
 8000a8e:	210c      	movs	r1, #12
 8000a90:	205a      	movs	r0, #90	; 0x5a
 8000a92:	f7ff fc63 	bl	800035c <Servot2>
 8000a96:	e4c5      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == '2'){lcd_send_string("[0, 1, 0, 1, 1]");Servot1(0, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_2);Servot2(90, TIM_CHANNEL_3);Servot2(90, TIM_CHANNEL_4);}
 8000a98:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <main+0x708>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b32      	cmp	r3, #50	; 0x32
 8000a9e:	d137      	bne.n	8000b10 <main+0x748>
 8000aa0:	481a      	ldr	r0, [pc, #104]	; (8000b0c <main+0x744>)
 8000aa2:	f7ff fc0f 	bl	80002c4 <lcd_send_string>
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f7ff fc21 	bl	80002f0 <Servot1>
 8000aae:	2100      	movs	r1, #0
 8000ab0:	205a      	movs	r0, #90	; 0x5a
 8000ab2:	f7ff fc53 	bl	800035c <Servot2>
 8000ab6:	2104      	movs	r1, #4
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f7ff fc4f 	bl	800035c <Servot2>
 8000abe:	2108      	movs	r1, #8
 8000ac0:	205a      	movs	r0, #90	; 0x5a
 8000ac2:	f7ff fc4b 	bl	800035c <Servot2>
 8000ac6:	210c      	movs	r1, #12
 8000ac8:	205a      	movs	r0, #90	; 0x5a
 8000aca:	f7ff fc47 	bl	800035c <Servot2>
 8000ace:	e4a9      	b.n	8000424 <main+0x5c>
 8000ad0:	20000028 	.word	0x20000028
 8000ad4:	08003e64 	.word	0x08003e64
 8000ad8:	08003e74 	.word	0x08003e74
 8000adc:	08003e84 	.word	0x08003e84
 8000ae0:	08003e94 	.word	0x08003e94
 8000ae4:	08003ea4 	.word	0x08003ea4
 8000ae8:	08003eb4 	.word	0x08003eb4
 8000aec:	08003ec4 	.word	0x08003ec4
 8000af0:	08003ed4 	.word	0x08003ed4
 8000af4:	08003ee4 	.word	0x08003ee4
 8000af8:	08003ef4 	.word	0x08003ef4
 8000afc:	08003f04 	.word	0x08003f04
 8000b00:	08003f14 	.word	0x08003f14
 8000b04:	08003f24 	.word	0x08003f24
 8000b08:	08003f34 	.word	0x08003f34
 8000b0c:	08003f44 	.word	0x08003f44
	  else if(RX_BUFFER[0] == '3'){lcd_send_string("[1, 0, 1, 0, 1]");Servot1(90, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_2);Servot2(0, TIM_CHANNEL_3);Servot2(90, TIM_CHANNEL_4);}
 8000b10:	4b36      	ldr	r3, [pc, #216]	; (8000bec <main+0x824>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b33      	cmp	r3, #51	; 0x33
 8000b16:	d117      	bne.n	8000b48 <main+0x780>
 8000b18:	4835      	ldr	r0, [pc, #212]	; (8000bf0 <main+0x828>)
 8000b1a:	f7ff fbd3 	bl	80002c4 <lcd_send_string>
 8000b1e:	2100      	movs	r1, #0
 8000b20:	205a      	movs	r0, #90	; 0x5a
 8000b22:	f7ff fbe5 	bl	80002f0 <Servot1>
 8000b26:	2100      	movs	r1, #0
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f7ff fc17 	bl	800035c <Servot2>
 8000b2e:	2104      	movs	r1, #4
 8000b30:	205a      	movs	r0, #90	; 0x5a
 8000b32:	f7ff fc13 	bl	800035c <Servot2>
 8000b36:	2108      	movs	r1, #8
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff fc0f 	bl	800035c <Servot2>
 8000b3e:	210c      	movs	r1, #12
 8000b40:	205a      	movs	r0, #90	; 0x5a
 8000b42:	f7ff fc0b 	bl	800035c <Servot2>
 8000b46:	e46d      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == '4'){lcd_send_string("[1, 0, 1, 1, 0]");Servot1(90, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_2);Servot2(90, TIM_CHANNEL_3);Servot2(0, TIM_CHANNEL_4);}
 8000b48:	4b28      	ldr	r3, [pc, #160]	; (8000bec <main+0x824>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b34      	cmp	r3, #52	; 0x34
 8000b4e:	d117      	bne.n	8000b80 <main+0x7b8>
 8000b50:	4828      	ldr	r0, [pc, #160]	; (8000bf4 <main+0x82c>)
 8000b52:	f7ff fbb7 	bl	80002c4 <lcd_send_string>
 8000b56:	2100      	movs	r1, #0
 8000b58:	205a      	movs	r0, #90	; 0x5a
 8000b5a:	f7ff fbc9 	bl	80002f0 <Servot1>
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2000      	movs	r0, #0
 8000b62:	f7ff fbfb 	bl	800035c <Servot2>
 8000b66:	2104      	movs	r1, #4
 8000b68:	205a      	movs	r0, #90	; 0x5a
 8000b6a:	f7ff fbf7 	bl	800035c <Servot2>
 8000b6e:	2108      	movs	r1, #8
 8000b70:	205a      	movs	r0, #90	; 0x5a
 8000b72:	f7ff fbf3 	bl	800035c <Servot2>
 8000b76:	210c      	movs	r1, #12
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f7ff fbef 	bl	800035c <Servot2>
 8000b7e:	e451      	b.n	8000424 <main+0x5c>
	  else if(RX_BUFFER[0] == '5'){lcd_send_string("[1, 1, 0, 1, 0]");Servot1(90, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_1);Servot2(0, TIM_CHANNEL_2);Servot2(90, TIM_CHANNEL_3);Servot2(0, TIM_CHANNEL_4);}
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <main+0x824>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b35      	cmp	r3, #53	; 0x35
 8000b86:	d117      	bne.n	8000bb8 <main+0x7f0>
 8000b88:	481b      	ldr	r0, [pc, #108]	; (8000bf8 <main+0x830>)
 8000b8a:	f7ff fb9b 	bl	80002c4 <lcd_send_string>
 8000b8e:	2100      	movs	r1, #0
 8000b90:	205a      	movs	r0, #90	; 0x5a
 8000b92:	f7ff fbad 	bl	80002f0 <Servot1>
 8000b96:	2100      	movs	r1, #0
 8000b98:	205a      	movs	r0, #90	; 0x5a
 8000b9a:	f7ff fbdf 	bl	800035c <Servot2>
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f7ff fbdb 	bl	800035c <Servot2>
 8000ba6:	2108      	movs	r1, #8
 8000ba8:	205a      	movs	r0, #90	; 0x5a
 8000baa:	f7ff fbd7 	bl	800035c <Servot2>
 8000bae:	210c      	movs	r1, #12
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f7ff fbd3 	bl	800035c <Servot2>
 8000bb6:	e435      	b.n	8000424 <main+0x5c>

	  //////////////////////////////
	  else{lcd_send_string("[1, 1, 1, 1, 1]");Servot1(90, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_1);Servot2(90, TIM_CHANNEL_2);Servot2(90, TIM_CHANNEL_3);Servot2(90, TIM_CHANNEL_4);continue;}
 8000bb8:	4810      	ldr	r0, [pc, #64]	; (8000bfc <main+0x834>)
 8000bba:	f7ff fb83 	bl	80002c4 <lcd_send_string>
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	205a      	movs	r0, #90	; 0x5a
 8000bc2:	f7ff fb95 	bl	80002f0 <Servot1>
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	205a      	movs	r0, #90	; 0x5a
 8000bca:	f7ff fbc7 	bl	800035c <Servot2>
 8000bce:	2104      	movs	r1, #4
 8000bd0:	205a      	movs	r0, #90	; 0x5a
 8000bd2:	f7ff fbc3 	bl	800035c <Servot2>
 8000bd6:	2108      	movs	r1, #8
 8000bd8:	205a      	movs	r0, #90	; 0x5a
 8000bda:	f7ff fbbf 	bl	800035c <Servot2>
 8000bde:	210c      	movs	r1, #12
 8000be0:	205a      	movs	r0, #90	; 0x5a
 8000be2:	f7ff fbbb 	bl	800035c <Servot2>
 8000be6:	bf00      	nop
	  lcd_put_cur(1, 0);
 8000be8:	e41c      	b.n	8000424 <main+0x5c>
 8000bea:	bf00      	nop
 8000bec:	20000028 	.word	0x20000028
 8000bf0:	08003f54 	.word	0x08003f54
 8000bf4:	08003f64 	.word	0x08003f64
 8000bf8:	08003f74 	.word	0x08003f74
 8000bfc:	08003d94 	.word	0x08003d94

08000c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b090      	sub	sp, #64	; 0x40
 8000c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c06:	f107 0318 	add.w	r3, r7, #24
 8000c0a:	2228      	movs	r2, #40	; 0x28
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f003 f89a 	bl	8003d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c22:	2301      	movs	r3, #1
 8000c24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c30:	2301      	movs	r3, #1
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c34:	2302      	movs	r3, #2
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000c3e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c44:	f107 0318 	add.w	r3, r7, #24
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f001 fb77 	bl	800233c <HAL_RCC_OscConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c54:	f000 f9b6 	bl	8000fc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c58:	230f      	movs	r3, #15
 8000c5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2101      	movs	r1, #1
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 fde2 	bl	800283c <HAL_RCC_ClockConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c7e:	f000 f9a1 	bl	8000fc4 <Error_Handler>
  }
}
 8000c82:	bf00      	nop
 8000c84:	3740      	adds	r7, #64	; 0x40
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000c92:	4a13      	ldr	r2, [pc, #76]	; (8000ce0 <MX_I2C1_Init+0x54>)
 8000c94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000c98:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <MX_I2C1_Init+0x58>)
 8000c9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000caa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000cca:	f000 feed 	bl	8001aa8 <HAL_I2C_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cd4:	f000 f976 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	2000002c 	.word	0x2000002c
 8000ce0:	40005400 	.word	0x40005400
 8000ce4:	000186a0 	.word	0x000186a0

08000ce8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b092      	sub	sp, #72	; 0x48
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
 8000d08:	615a      	str	r2, [r3, #20]
 8000d0a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	2220      	movs	r2, #32
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f003 f818 	bl	8003d48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d18:	4b33      	ldr	r3, [pc, #204]	; (8000de8 <MX_TIM1_Init+0x100>)
 8000d1a:	4a34      	ldr	r2, [pc, #208]	; (8000dec <MX_TIM1_Init+0x104>)
 8000d1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 355;
 8000d1e:	4b32      	ldr	r3, [pc, #200]	; (8000de8 <MX_TIM1_Init+0x100>)
 8000d20:	f240 1263 	movw	r2, #355	; 0x163
 8000d24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d26:	4b30      	ldr	r3, [pc, #192]	; (8000de8 <MX_TIM1_Init+0x100>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1799;
 8000d2c:	4b2e      	ldr	r3, [pc, #184]	; (8000de8 <MX_TIM1_Init+0x100>)
 8000d2e:	f240 7207 	movw	r2, #1799	; 0x707
 8000d32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d34:	4b2c      	ldr	r3, [pc, #176]	; (8000de8 <MX_TIM1_Init+0x100>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d3a:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <MX_TIM1_Init+0x100>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d40:	4b29      	ldr	r3, [pc, #164]	; (8000de8 <MX_TIM1_Init+0x100>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d46:	4828      	ldr	r0, [pc, #160]	; (8000de8 <MX_TIM1_Init+0x100>)
 8000d48:	f001 ff12 	bl	8002b70 <HAL_TIM_PWM_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d52:	f000 f937 	bl	8000fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d62:	4619      	mov	r1, r3
 8000d64:	4820      	ldr	r0, [pc, #128]	; (8000de8 <MX_TIM1_Init+0x100>)
 8000d66:	f002 fac1 	bl	80032ec <HAL_TIMEx_MasterConfigSynchronization>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000d70:	f000 f928 	bl	8000fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d74:	2360      	movs	r3, #96	; 0x60
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d80:	2300      	movs	r3, #0
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d94:	2200      	movs	r2, #0
 8000d96:	4619      	mov	r1, r3
 8000d98:	4813      	ldr	r0, [pc, #76]	; (8000de8 <MX_TIM1_Init+0x100>)
 8000d9a:	f001 ffdb 	bl	8002d54 <HAL_TIM_PWM_ConfigChannel>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000da4:	f000 f90e 	bl	8000fc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4807      	ldr	r0, [pc, #28]	; (8000de8 <MX_TIM1_Init+0x100>)
 8000dcc:	f002 faec 	bl	80033a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000dd6:	f000 f8f5 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000dda:	4803      	ldr	r0, [pc, #12]	; (8000de8 <MX_TIM1_Init+0x100>)
 8000ddc:	f000 f998 	bl	8001110 <HAL_TIM_MspPostInit>

}
 8000de0:	bf00      	nop
 8000de2:	3748      	adds	r7, #72	; 0x48
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	200000c4 	.word	0x200000c4
 8000dec:	40012c00 	.word	0x40012c00

08000df0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df6:	f107 0320 	add.w	r3, r7, #32
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]
 8000e0e:	615a      	str	r2, [r3, #20]
 8000e10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e12:	4b33      	ldr	r3, [pc, #204]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000e14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 355;
 8000e1a:	4b31      	ldr	r3, [pc, #196]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000e1c:	f240 1263 	movw	r2, #355	; 0x163
 8000e20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e22:	4b2f      	ldr	r3, [pc, #188]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1799;
 8000e28:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000e2a:	f240 7207 	movw	r2, #1799	; 0x707
 8000e2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e30:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e36:	4b2a      	ldr	r3, [pc, #168]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e3c:	4828      	ldr	r0, [pc, #160]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000e3e:	f001 fe97 	bl	8002b70 <HAL_TIM_PWM_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000e48:	f000 f8bc 	bl	8000fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e54:	f107 0320 	add.w	r3, r7, #32
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4821      	ldr	r0, [pc, #132]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000e5c:	f002 fa46 	bl	80032ec <HAL_TIMEx_MasterConfigSynchronization>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000e66:	f000 f8ad 	bl	8000fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e6a:	2360      	movs	r3, #96	; 0x60
 8000e6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4817      	ldr	r0, [pc, #92]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000e82:	f001 ff67 	bl	8002d54 <HAL_TIM_PWM_ConfigChannel>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e8c:	f000 f89a 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2204      	movs	r2, #4
 8000e94:	4619      	mov	r1, r3
 8000e96:	4812      	ldr	r0, [pc, #72]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000e98:	f001 ff5c 	bl	8002d54 <HAL_TIM_PWM_ConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000ea2:	f000 f88f 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2208      	movs	r2, #8
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000eae:	f001 ff51 	bl	8002d54 <HAL_TIM_PWM_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000eb8:	f000 f884 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4807      	ldr	r0, [pc, #28]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000ec4:	f001 ff46 	bl	8002d54 <HAL_TIM_PWM_ConfigChannel>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000ece:	f000 f879 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ed2:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <MX_TIM2_Init+0xf0>)
 8000ed4:	f000 f91c 	bl	8001110 <HAL_TIM_MspPostInit>

}
 8000ed8:	bf00      	nop
 8000eda:	3728      	adds	r7, #40	; 0x28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	2000010c 	.word	0x2000010c

08000ee4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_USART1_UART_Init+0x4c>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <MX_USART1_UART_Init+0x50>)
 8000eec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <MX_USART1_UART_Init+0x4c>)
 8000ef0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ef4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_USART1_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_USART1_UART_Init+0x4c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_USART1_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_USART1_UART_Init+0x4c>)
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <MX_USART1_UART_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_USART1_UART_Init+0x4c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_USART1_UART_Init+0x4c>)
 8000f1c:	f002 fa95 	bl	800344a <HAL_UART_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f26:	f000 f84d 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000080 	.word	0x20000080
 8000f34:	40013800 	.word	0x40013800

08000f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <MX_GPIO_Init+0x58>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	4a13      	ldr	r2, [pc, #76]	; (8000f90 <MX_GPIO_Init+0x58>)
 8000f44:	f043 0320 	orr.w	r3, r3, #32
 8000f48:	6193      	str	r3, [r2, #24]
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_GPIO_Init+0x58>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	f003 0320 	and.w	r3, r3, #32
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_GPIO_Init+0x58>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <MX_GPIO_Init+0x58>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	6193      	str	r3, [r2, #24]
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <MX_GPIO_Init+0x58>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <MX_GPIO_Init+0x58>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <MX_GPIO_Init+0x58>)
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	6193      	str	r3, [r2, #24]
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <MX_GPIO_Init+0x58>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

}
 8000f86:	bf00      	nop
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr
 8000f90:	40021000 	.word	0x40021000

08000f94 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
    if(huart->Instance == huart1.Instance)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_UART_RxCpltCallback+0x28>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d104      	bne.n	8000fb2 <HAL_UART_RxCpltCallback+0x1e>
    {
    HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4905      	ldr	r1, [pc, #20]	; (8000fc0 <HAL_UART_RxCpltCallback+0x2c>)
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <HAL_UART_RxCpltCallback+0x28>)
 8000fae:	f002 fa99 	bl	80034e4 <HAL_UART_Receive_IT>
    }
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000080 	.word	0x20000080
 8000fc0:	20000028 	.word	0x20000028

08000fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
}
 8000fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <Error_Handler+0x8>
	...

08000fd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_MspInit+0x5c>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	4a14      	ldr	r2, [pc, #80]	; (800102c <HAL_MspInit+0x5c>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6193      	str	r3, [r2, #24]
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_MspInit+0x5c>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <HAL_MspInit+0x5c>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	4a0e      	ldr	r2, [pc, #56]	; (800102c <HAL_MspInit+0x5c>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	61d3      	str	r3, [r2, #28]
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <HAL_MspInit+0x5c>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <HAL_MspInit+0x60>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <HAL_MspInit+0x60>)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	40021000 	.word	0x40021000
 8001030:	40010000 	.word	0x40010000

08001034 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a15      	ldr	r2, [pc, #84]	; (80010a4 <HAL_I2C_MspInit+0x70>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d123      	bne.n	800109c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <HAL_I2C_MspInit+0x74>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a13      	ldr	r2, [pc, #76]	; (80010a8 <HAL_I2C_MspInit+0x74>)
 800105a:	f043 0308 	orr.w	r3, r3, #8
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <HAL_I2C_MspInit+0x74>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0308 	and.w	r3, r3, #8
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800106c:	23c0      	movs	r3, #192	; 0xc0
 800106e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001070:	2312      	movs	r3, #18
 8001072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	4619      	mov	r1, r3
 800107e:	480b      	ldr	r0, [pc, #44]	; (80010ac <HAL_I2C_MspInit+0x78>)
 8001080:	f000 fb8e 	bl	80017a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_I2C_MspInit+0x74>)
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <HAL_I2C_MspInit+0x74>)
 800108a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800108e:	61d3      	str	r3, [r2, #28]
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_I2C_MspInit+0x74>)
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800109c:	bf00      	nop
 800109e:	3720      	adds	r7, #32
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40005400 	.word	0x40005400
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40010c00 	.word	0x40010c00

080010b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a12      	ldr	r2, [pc, #72]	; (8001108 <HAL_TIM_PWM_MspInit+0x58>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d10c      	bne.n	80010dc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010c2:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_TIM_PWM_MspInit+0x5c>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	4a11      	ldr	r2, [pc, #68]	; (800110c <HAL_TIM_PWM_MspInit+0x5c>)
 80010c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010cc:	6193      	str	r3, [r2, #24]
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <HAL_TIM_PWM_MspInit+0x5c>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010da:	e010      	b.n	80010fe <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e4:	d10b      	bne.n	80010fe <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <HAL_TIM_PWM_MspInit+0x5c>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	4a08      	ldr	r2, [pc, #32]	; (800110c <HAL_TIM_PWM_MspInit+0x5c>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	61d3      	str	r3, [r2, #28]
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_TIM_PWM_MspInit+0x5c>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
}
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	40012c00 	.word	0x40012c00
 800110c:	40021000 	.word	0x40021000

08001110 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a1f      	ldr	r2, [pc, #124]	; (80011a8 <HAL_TIM_MspPostInit+0x98>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d119      	bne.n	8001164 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001130:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <HAL_TIM_MspPostInit+0x9c>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a1d      	ldr	r2, [pc, #116]	; (80011ac <HAL_TIM_MspPostInit+0x9c>)
 8001136:	f043 0304 	orr.w	r3, r3, #4
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <HAL_TIM_MspPostInit+0x9c>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001148:	f44f 7380 	mov.w	r3, #256	; 0x100
 800114c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2302      	movs	r3, #2
 8001154:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	4619      	mov	r1, r3
 800115c:	4814      	ldr	r0, [pc, #80]	; (80011b0 <HAL_TIM_MspPostInit+0xa0>)
 800115e:	f000 fb1f 	bl	80017a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001162:	e01c      	b.n	800119e <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800116c:	d117      	bne.n	800119e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_TIM_MspPostInit+0x9c>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <HAL_TIM_MspPostInit+0x9c>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6193      	str	r3, [r2, #24]
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <HAL_TIM_MspPostInit+0x9c>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001186:	230f      	movs	r3, #15
 8001188:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2302      	movs	r3, #2
 8001190:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <HAL_TIM_MspPostInit+0xa0>)
 800119a:	f000 fb01 	bl	80017a0 <HAL_GPIO_Init>
}
 800119e:	bf00      	nop
 80011a0:	3720      	adds	r7, #32
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40012c00 	.word	0x40012c00
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010800 	.word	0x40010800

080011b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a20      	ldr	r2, [pc, #128]	; (8001250 <HAL_UART_MspInit+0x9c>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d139      	bne.n	8001248 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <HAL_UART_MspInit+0xa0>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a1e      	ldr	r2, [pc, #120]	; (8001254 <HAL_UART_MspInit+0xa0>)
 80011da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <HAL_UART_MspInit+0xa0>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <HAL_UART_MspInit+0xa0>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a18      	ldr	r2, [pc, #96]	; (8001254 <HAL_UART_MspInit+0xa0>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <HAL_UART_MspInit+0xa0>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001208:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	4619      	mov	r1, r3
 8001218:	480f      	ldr	r0, [pc, #60]	; (8001258 <HAL_UART_MspInit+0xa4>)
 800121a:	f000 fac1 	bl	80017a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800121e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001222:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	4619      	mov	r1, r3
 8001232:	4809      	ldr	r0, [pc, #36]	; (8001258 <HAL_UART_MspInit+0xa4>)
 8001234:	f000 fab4 	bl	80017a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	2025      	movs	r0, #37	; 0x25
 800123e:	f000 f9c8 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001242:	2025      	movs	r0, #37	; 0x25
 8001244:	f000 f9e1 	bl	800160a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001248:	bf00      	nop
 800124a:	3720      	adds	r7, #32
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40013800 	.word	0x40013800
 8001254:	40021000 	.word	0x40021000
 8001258:	40010800 	.word	0x40010800

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <NMI_Handler+0x4>

08001262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <HardFault_Handler+0x4>

08001268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <MemManage_Handler+0x4>

0800126e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <BusFault_Handler+0x4>

08001274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <UsageFault_Handler+0x4>

0800127a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr

08001286 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a2:	f000 f87f 	bl	80013a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <USART1_IRQHandler+0x10>)
 80012b2:	f002 f947 	bl	8003544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000080 	.word	0x20000080

080012c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ce:	490d      	ldr	r1, [pc, #52]	; (8001304 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d4:	e002      	b.n	80012dc <LoopCopyDataInit>

080012d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012da:	3304      	adds	r3, #4

080012dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e0:	d3f9      	bcc.n	80012d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012e4:	4c0a      	ldr	r4, [pc, #40]	; (8001310 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e8:	e001      	b.n	80012ee <LoopFillZerobss>

080012ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ec:	3204      	adds	r2, #4

080012ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f0:	d3fb      	bcc.n	80012ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012f2:	f7ff ffe5 	bl	80012c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012f6:	f002 fd03 	bl	8003d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012fa:	f7ff f865 	bl	80003c8 <main>
  bx lr
 80012fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001304:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001308:	08003fb4 	.word	0x08003fb4
  ldr r2, =_sbss
 800130c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001310:	20000158 	.word	0x20000158

08001314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC1_2_IRQHandler>
	...

08001318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_Init+0x28>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a07      	ldr	r2, [pc, #28]	; (8001340 <HAL_Init+0x28>)
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001328:	2003      	movs	r0, #3
 800132a:	f000 f947 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800132e:	200f      	movs	r0, #15
 8001330:	f000 f808 	bl	8001344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001334:	f7ff fe4c 	bl	8000fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40022000 	.word	0x40022000

08001344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_InitTick+0x54>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_InitTick+0x58>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	fbb3 f3f1 	udiv	r3, r3, r1
 800135e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f95f 	bl	8001626 <HAL_SYSTICK_Config>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00e      	b.n	8001390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d80a      	bhi.n	800138e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001378:	2200      	movs	r2, #0
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f000 f927 	bl	80015d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001384:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <HAL_InitTick+0x5c>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	e000      	b.n	8001390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000000 	.word	0x20000000
 800139c:	20000008 	.word	0x20000008
 80013a0:	20000004 	.word	0x20000004

080013a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_IncTick+0x1c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <HAL_IncTick+0x20>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4a03      	ldr	r2, [pc, #12]	; (80013c4 <HAL_IncTick+0x20>)
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	20000008 	.word	0x20000008
 80013c4:	20000154 	.word	0x20000154

080013c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return uwTick;
 80013cc:	4b02      	ldr	r3, [pc, #8]	; (80013d8 <HAL_GetTick+0x10>)
 80013ce:	681b      	ldr	r3, [r3, #0]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	20000154 	.word	0x20000154

080013dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e4:	f7ff fff0 	bl	80013c8 <HAL_GetTick>
 80013e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f4:	d005      	beq.n	8001402 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_Delay+0x44>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4413      	add	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001402:	bf00      	nop
 8001404:	f7ff ffe0 	bl	80013c8 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	429a      	cmp	r2, r3
 8001412:	d8f7      	bhi.n	8001404 <HAL_Delay+0x28>
  {
  }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000008 	.word	0x20000008

08001424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001440:	4013      	ands	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800144c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001456:	4a04      	ldr	r2, [pc, #16]	; (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	60d3      	str	r3, [r2, #12]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <__NVIC_GetPriorityGrouping+0x18>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	f003 0307 	and.w	r3, r3, #7
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	db0b      	blt.n	80014b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	f003 021f 	and.w	r2, r3, #31
 80014a0:	4906      	ldr	r1, [pc, #24]	; (80014bc <__NVIC_EnableIRQ+0x34>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	2001      	movs	r0, #1
 80014aa:	fa00 f202 	lsl.w	r2, r0, r2
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	e000e100 	.word	0xe000e100

080014c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	db0a      	blt.n	80014ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	490c      	ldr	r1, [pc, #48]	; (800150c <__NVIC_SetPriority+0x4c>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	0112      	lsls	r2, r2, #4
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	440b      	add	r3, r1
 80014e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e8:	e00a      	b.n	8001500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4908      	ldr	r1, [pc, #32]	; (8001510 <__NVIC_SetPriority+0x50>)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	3b04      	subs	r3, #4
 80014f8:	0112      	lsls	r2, r2, #4
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	440b      	add	r3, r1
 80014fe:	761a      	strb	r2, [r3, #24]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000e100 	.word	0xe000e100
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f1c3 0307 	rsb	r3, r3, #7
 800152e:	2b04      	cmp	r3, #4
 8001530:	bf28      	it	cs
 8001532:	2304      	movcs	r3, #4
 8001534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3304      	adds	r3, #4
 800153a:	2b06      	cmp	r3, #6
 800153c:	d902      	bls.n	8001544 <NVIC_EncodePriority+0x30>
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3b03      	subs	r3, #3
 8001542:	e000      	b.n	8001546 <NVIC_EncodePriority+0x32>
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	f04f 32ff 	mov.w	r2, #4294967295
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800155c:	f04f 31ff 	mov.w	r1, #4294967295
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43d9      	mvns	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	4313      	orrs	r3, r2
         );
}
 800156e:	4618      	mov	r0, r3
 8001570:	3724      	adds	r7, #36	; 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001588:	d301      	bcc.n	800158e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158a:	2301      	movs	r3, #1
 800158c:	e00f      	b.n	80015ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <SysTick_Config+0x40>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001596:	210f      	movs	r1, #15
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f7ff ff90 	bl	80014c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <SysTick_Config+0x40>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <SysTick_Config+0x40>)
 80015a8:	2207      	movs	r2, #7
 80015aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	e000e010 	.word	0xe000e010

080015bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff2d 	bl	8001424 <__NVIC_SetPriorityGrouping>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e4:	f7ff ff42 	bl	800146c <__NVIC_GetPriorityGrouping>
 80015e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	6978      	ldr	r0, [r7, #20]
 80015f0:	f7ff ff90 	bl	8001514 <NVIC_EncodePriority>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff5f 	bl	80014c0 <__NVIC_SetPriority>
}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff35 	bl	8001488 <__NVIC_EnableIRQ>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff ffa2 	bl	8001578 <SysTick_Config>
 8001634:	4603      	mov	r3, r0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800163e:	b480      	push	{r7}
 8001640:	b085      	sub	sp, #20
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001650:	2b02      	cmp	r3, #2
 8001652:	d008      	beq.n	8001666 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2204      	movs	r2, #4
 8001658:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e020      	b.n	80016a8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 020e 	bic.w	r2, r2, #14
 8001674:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0201 	bic.w	r2, r2, #1
 8001684:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168e:	2101      	movs	r1, #1
 8001690:	fa01 f202 	lsl.w	r2, r1, r2
 8001694:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
	...

080016b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d005      	beq.n	80016d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2204      	movs	r2, #4
 80016ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	e051      	b.n	800177a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 020e 	bic.w	r2, r2, #14
 80016e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0201 	bic.w	r2, r2, #1
 80016f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a22      	ldr	r2, [pc, #136]	; (8001784 <HAL_DMA_Abort_IT+0xd0>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d029      	beq.n	8001754 <HAL_DMA_Abort_IT+0xa0>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a20      	ldr	r2, [pc, #128]	; (8001788 <HAL_DMA_Abort_IT+0xd4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d022      	beq.n	8001750 <HAL_DMA_Abort_IT+0x9c>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a1f      	ldr	r2, [pc, #124]	; (800178c <HAL_DMA_Abort_IT+0xd8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d01a      	beq.n	800174a <HAL_DMA_Abort_IT+0x96>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a1d      	ldr	r2, [pc, #116]	; (8001790 <HAL_DMA_Abort_IT+0xdc>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d012      	beq.n	8001744 <HAL_DMA_Abort_IT+0x90>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <HAL_DMA_Abort_IT+0xe0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d00a      	beq.n	800173e <HAL_DMA_Abort_IT+0x8a>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1a      	ldr	r2, [pc, #104]	; (8001798 <HAL_DMA_Abort_IT+0xe4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d102      	bne.n	8001738 <HAL_DMA_Abort_IT+0x84>
 8001732:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001736:	e00e      	b.n	8001756 <HAL_DMA_Abort_IT+0xa2>
 8001738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800173c:	e00b      	b.n	8001756 <HAL_DMA_Abort_IT+0xa2>
 800173e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001742:	e008      	b.n	8001756 <HAL_DMA_Abort_IT+0xa2>
 8001744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001748:	e005      	b.n	8001756 <HAL_DMA_Abort_IT+0xa2>
 800174a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800174e:	e002      	b.n	8001756 <HAL_DMA_Abort_IT+0xa2>
 8001750:	2310      	movs	r3, #16
 8001752:	e000      	b.n	8001756 <HAL_DMA_Abort_IT+0xa2>
 8001754:	2301      	movs	r3, #1
 8001756:	4a11      	ldr	r2, [pc, #68]	; (800179c <HAL_DMA_Abort_IT+0xe8>)
 8001758:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	4798      	blx	r3
    } 
  }
  return status;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40020008 	.word	0x40020008
 8001788:	4002001c 	.word	0x4002001c
 800178c:	40020030 	.word	0x40020030
 8001790:	40020044 	.word	0x40020044
 8001794:	40020058 	.word	0x40020058
 8001798:	4002006c 	.word	0x4002006c
 800179c:	40020000 	.word	0x40020000

080017a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b08b      	sub	sp, #44	; 0x2c
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017aa:	2300      	movs	r3, #0
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b2:	e169      	b.n	8001a88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017b4:	2201      	movs	r2, #1
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	f040 8158 	bne.w	8001a82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4a9a      	ldr	r2, [pc, #616]	; (8001a40 <HAL_GPIO_Init+0x2a0>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d05e      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 80017dc:	4a98      	ldr	r2, [pc, #608]	; (8001a40 <HAL_GPIO_Init+0x2a0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d875      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 80017e2:	4a98      	ldr	r2, [pc, #608]	; (8001a44 <HAL_GPIO_Init+0x2a4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d058      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 80017e8:	4a96      	ldr	r2, [pc, #600]	; (8001a44 <HAL_GPIO_Init+0x2a4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d86f      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 80017ee:	4a96      	ldr	r2, [pc, #600]	; (8001a48 <HAL_GPIO_Init+0x2a8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d052      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 80017f4:	4a94      	ldr	r2, [pc, #592]	; (8001a48 <HAL_GPIO_Init+0x2a8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d869      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 80017fa:	4a94      	ldr	r2, [pc, #592]	; (8001a4c <HAL_GPIO_Init+0x2ac>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d04c      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 8001800:	4a92      	ldr	r2, [pc, #584]	; (8001a4c <HAL_GPIO_Init+0x2ac>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d863      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 8001806:	4a92      	ldr	r2, [pc, #584]	; (8001a50 <HAL_GPIO_Init+0x2b0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d046      	beq.n	800189a <HAL_GPIO_Init+0xfa>
 800180c:	4a90      	ldr	r2, [pc, #576]	; (8001a50 <HAL_GPIO_Init+0x2b0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d85d      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 8001812:	2b12      	cmp	r3, #18
 8001814:	d82a      	bhi.n	800186c <HAL_GPIO_Init+0xcc>
 8001816:	2b12      	cmp	r3, #18
 8001818:	d859      	bhi.n	80018ce <HAL_GPIO_Init+0x12e>
 800181a:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <HAL_GPIO_Init+0x80>)
 800181c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001820:	0800189b 	.word	0x0800189b
 8001824:	08001875 	.word	0x08001875
 8001828:	08001887 	.word	0x08001887
 800182c:	080018c9 	.word	0x080018c9
 8001830:	080018cf 	.word	0x080018cf
 8001834:	080018cf 	.word	0x080018cf
 8001838:	080018cf 	.word	0x080018cf
 800183c:	080018cf 	.word	0x080018cf
 8001840:	080018cf 	.word	0x080018cf
 8001844:	080018cf 	.word	0x080018cf
 8001848:	080018cf 	.word	0x080018cf
 800184c:	080018cf 	.word	0x080018cf
 8001850:	080018cf 	.word	0x080018cf
 8001854:	080018cf 	.word	0x080018cf
 8001858:	080018cf 	.word	0x080018cf
 800185c:	080018cf 	.word	0x080018cf
 8001860:	080018cf 	.word	0x080018cf
 8001864:	0800187d 	.word	0x0800187d
 8001868:	08001891 	.word	0x08001891
 800186c:	4a79      	ldr	r2, [pc, #484]	; (8001a54 <HAL_GPIO_Init+0x2b4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d013      	beq.n	800189a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001872:	e02c      	b.n	80018ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	623b      	str	r3, [r7, #32]
          break;
 800187a:	e029      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	3304      	adds	r3, #4
 8001882:	623b      	str	r3, [r7, #32]
          break;
 8001884:	e024      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	3308      	adds	r3, #8
 800188c:	623b      	str	r3, [r7, #32]
          break;
 800188e:	e01f      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	330c      	adds	r3, #12
 8001896:	623b      	str	r3, [r7, #32]
          break;
 8001898:	e01a      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018a2:	2304      	movs	r3, #4
 80018a4:	623b      	str	r3, [r7, #32]
          break;
 80018a6:	e013      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d105      	bne.n	80018bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b0:	2308      	movs	r3, #8
 80018b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	611a      	str	r2, [r3, #16]
          break;
 80018ba:	e009      	b.n	80018d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018bc:	2308      	movs	r3, #8
 80018be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	615a      	str	r2, [r3, #20]
          break;
 80018c6:	e003      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
          break;
 80018cc:	e000      	b.n	80018d0 <HAL_GPIO_Init+0x130>
          break;
 80018ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2bff      	cmp	r3, #255	; 0xff
 80018d4:	d801      	bhi.n	80018da <HAL_GPIO_Init+0x13a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	e001      	b.n	80018de <HAL_GPIO_Init+0x13e>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3304      	adds	r3, #4
 80018de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2bff      	cmp	r3, #255	; 0xff
 80018e4:	d802      	bhi.n	80018ec <HAL_GPIO_Init+0x14c>
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	e002      	b.n	80018f2 <HAL_GPIO_Init+0x152>
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	3b08      	subs	r3, #8
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	210f      	movs	r1, #15
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	401a      	ands	r2, r3
 8001904:	6a39      	ldr	r1, [r7, #32]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	431a      	orrs	r2, r3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80b1 	beq.w	8001a82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001920:	4b4d      	ldr	r3, [pc, #308]	; (8001a58 <HAL_GPIO_Init+0x2b8>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a4c      	ldr	r2, [pc, #304]	; (8001a58 <HAL_GPIO_Init+0x2b8>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6193      	str	r3, [r2, #24]
 800192c:	4b4a      	ldr	r3, [pc, #296]	; (8001a58 <HAL_GPIO_Init+0x2b8>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001938:	4a48      	ldr	r2, [pc, #288]	; (8001a5c <HAL_GPIO_Init+0x2bc>)
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	3302      	adds	r3, #2
 8001940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001944:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	220f      	movs	r2, #15
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4013      	ands	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a40      	ldr	r2, [pc, #256]	; (8001a60 <HAL_GPIO_Init+0x2c0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d013      	beq.n	800198c <HAL_GPIO_Init+0x1ec>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a3f      	ldr	r2, [pc, #252]	; (8001a64 <HAL_GPIO_Init+0x2c4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d00d      	beq.n	8001988 <HAL_GPIO_Init+0x1e8>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a3e      	ldr	r2, [pc, #248]	; (8001a68 <HAL_GPIO_Init+0x2c8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d007      	beq.n	8001984 <HAL_GPIO_Init+0x1e4>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a3d      	ldr	r2, [pc, #244]	; (8001a6c <HAL_GPIO_Init+0x2cc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d101      	bne.n	8001980 <HAL_GPIO_Init+0x1e0>
 800197c:	2303      	movs	r3, #3
 800197e:	e006      	b.n	800198e <HAL_GPIO_Init+0x1ee>
 8001980:	2304      	movs	r3, #4
 8001982:	e004      	b.n	800198e <HAL_GPIO_Init+0x1ee>
 8001984:	2302      	movs	r3, #2
 8001986:	e002      	b.n	800198e <HAL_GPIO_Init+0x1ee>
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <HAL_GPIO_Init+0x1ee>
 800198c:	2300      	movs	r3, #0
 800198e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001990:	f002 0203 	and.w	r2, r2, #3
 8001994:	0092      	lsls	r2, r2, #2
 8001996:	4093      	lsls	r3, r2
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800199e:	492f      	ldr	r1, [pc, #188]	; (8001a5c <HAL_GPIO_Init+0x2bc>)
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	3302      	adds	r3, #2
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019b8:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	492c      	ldr	r1, [pc, #176]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]
 80019c4:	e006      	b.n	80019d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019c6:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	4928      	ldr	r1, [pc, #160]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d006      	beq.n	80019ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019e0:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	4922      	ldr	r1, [pc, #136]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
 80019ec:	e006      	b.n	80019fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	491e      	ldr	r1, [pc, #120]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d006      	beq.n	8001a16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a08:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	4918      	ldr	r1, [pc, #96]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a16:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	4914      	ldr	r1, [pc, #80]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d021      	beq.n	8001a74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	490e      	ldr	r1, [pc, #56]	; (8001a70 <HAL_GPIO_Init+0x2d0>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	60cb      	str	r3, [r1, #12]
 8001a3c:	e021      	b.n	8001a82 <HAL_GPIO_Init+0x2e2>
 8001a3e:	bf00      	nop
 8001a40:	10320000 	.word	0x10320000
 8001a44:	10310000 	.word	0x10310000
 8001a48:	10220000 	.word	0x10220000
 8001a4c:	10210000 	.word	0x10210000
 8001a50:	10120000 	.word	0x10120000
 8001a54:	10110000 	.word	0x10110000
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40010000 	.word	0x40010000
 8001a60:	40010800 	.word	0x40010800
 8001a64:	40010c00 	.word	0x40010c00
 8001a68:	40011000 	.word	0x40011000
 8001a6c:	40011400 	.word	0x40011400
 8001a70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_GPIO_Init+0x304>)
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	4909      	ldr	r1, [pc, #36]	; (8001aa4 <HAL_GPIO_Init+0x304>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	3301      	adds	r3, #1
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f47f ae8e 	bne.w	80017b4 <HAL_GPIO_Init+0x14>
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	372c      	adds	r7, #44	; 0x2c
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	40010400 	.word	0x40010400

08001aa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e12b      	b.n	8001d12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d106      	bne.n	8001ad4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff fab0 	bl	8001034 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2224      	movs	r2, #36	; 0x24
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0201 	bic.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001afa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b0c:	f000 ffea 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 8001b10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4a81      	ldr	r2, [pc, #516]	; (8001d1c <HAL_I2C_Init+0x274>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d807      	bhi.n	8001b2c <HAL_I2C_Init+0x84>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4a80      	ldr	r2, [pc, #512]	; (8001d20 <HAL_I2C_Init+0x278>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	bf94      	ite	ls
 8001b24:	2301      	movls	r3, #1
 8001b26:	2300      	movhi	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	e006      	b.n	8001b3a <HAL_I2C_Init+0x92>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4a7d      	ldr	r2, [pc, #500]	; (8001d24 <HAL_I2C_Init+0x27c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	bf94      	ite	ls
 8001b34:	2301      	movls	r3, #1
 8001b36:	2300      	movhi	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e0e7      	b.n	8001d12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4a78      	ldr	r2, [pc, #480]	; (8001d28 <HAL_I2C_Init+0x280>)
 8001b46:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4a:	0c9b      	lsrs	r3, r3, #18
 8001b4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	4a6a      	ldr	r2, [pc, #424]	; (8001d1c <HAL_I2C_Init+0x274>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d802      	bhi.n	8001b7c <HAL_I2C_Init+0xd4>
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	e009      	b.n	8001b90 <HAL_I2C_Init+0xe8>
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b82:	fb02 f303 	mul.w	r3, r2, r3
 8001b86:	4a69      	ldr	r2, [pc, #420]	; (8001d2c <HAL_I2C_Init+0x284>)
 8001b88:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8c:	099b      	lsrs	r3, r3, #6
 8001b8e:	3301      	adds	r3, #1
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	430b      	orrs	r3, r1
 8001b96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ba2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	495c      	ldr	r1, [pc, #368]	; (8001d1c <HAL_I2C_Init+0x274>)
 8001bac:	428b      	cmp	r3, r1
 8001bae:	d819      	bhi.n	8001be4 <HAL_I2C_Init+0x13c>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1e59      	subs	r1, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bbe:	1c59      	adds	r1, r3, #1
 8001bc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001bc4:	400b      	ands	r3, r1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00a      	beq.n	8001be0 <HAL_I2C_Init+0x138>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	1e59      	subs	r1, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bd8:	3301      	adds	r3, #1
 8001bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bde:	e051      	b.n	8001c84 <HAL_I2C_Init+0x1dc>
 8001be0:	2304      	movs	r3, #4
 8001be2:	e04f      	b.n	8001c84 <HAL_I2C_Init+0x1dc>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d111      	bne.n	8001c10 <HAL_I2C_Init+0x168>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	1e58      	subs	r0, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6859      	ldr	r1, [r3, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	440b      	add	r3, r1
 8001bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bfe:	3301      	adds	r3, #1
 8001c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	bf0c      	ite	eq
 8001c08:	2301      	moveq	r3, #1
 8001c0a:	2300      	movne	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	e012      	b.n	8001c36 <HAL_I2C_Init+0x18e>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1e58      	subs	r0, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6859      	ldr	r1, [r3, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	0099      	lsls	r1, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c26:	3301      	adds	r3, #1
 8001c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	bf0c      	ite	eq
 8001c30:	2301      	moveq	r3, #1
 8001c32:	2300      	movne	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_I2C_Init+0x196>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e022      	b.n	8001c84 <HAL_I2C_Init+0x1dc>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10e      	bne.n	8001c64 <HAL_I2C_Init+0x1bc>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1e58      	subs	r0, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6859      	ldr	r1, [r3, #4]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	440b      	add	r3, r1
 8001c54:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c58:	3301      	adds	r3, #1
 8001c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c62:	e00f      	b.n	8001c84 <HAL_I2C_Init+0x1dc>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1e58      	subs	r0, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6859      	ldr	r1, [r3, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	0099      	lsls	r1, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	6809      	ldr	r1, [r1, #0]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69da      	ldr	r2, [r3, #28]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6911      	ldr	r1, [r2, #16]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68d2      	ldr	r2, [r2, #12]
 8001cbe:	4311      	orrs	r1, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	000186a0 	.word	0x000186a0
 8001d20:	001e847f 	.word	0x001e847f
 8001d24:	003d08ff 	.word	0x003d08ff
 8001d28:	431bde83 	.word	0x431bde83
 8001d2c:	10624dd3 	.word	0x10624dd3

08001d30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af02      	add	r7, sp, #8
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	817b      	strh	r3, [r7, #10]
 8001d40:	4613      	mov	r3, r2
 8001d42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff fb40 	bl	80013c8 <HAL_GetTick>
 8001d48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b20      	cmp	r3, #32
 8001d54:	f040 80e0 	bne.w	8001f18 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	2319      	movs	r3, #25
 8001d5e:	2201      	movs	r2, #1
 8001d60:	4970      	ldr	r1, [pc, #448]	; (8001f24 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 f964 	bl	8002030 <I2C_WaitOnFlagUntilTimeout>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e0d3      	b.n	8001f1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <HAL_I2C_Master_Transmit+0x50>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e0cc      	b.n	8001f1a <HAL_I2C_Master_Transmit+0x1ea>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d007      	beq.n	8001da6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 0201 	orr.w	r2, r2, #1
 8001da4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2221      	movs	r2, #33	; 0x21
 8001dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2210      	movs	r2, #16
 8001dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	893a      	ldrh	r2, [r7, #8]
 8001dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4a50      	ldr	r2, [pc, #320]	; (8001f28 <HAL_I2C_Master_Transmit+0x1f8>)
 8001de6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001de8:	8979      	ldrh	r1, [r7, #10]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	6a3a      	ldr	r2, [r7, #32]
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 f89c 	bl	8001f2c <I2C_MasterRequestWrite>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e08d      	b.n	8001f1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e14:	e066      	b.n	8001ee4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	6a39      	ldr	r1, [r7, #32]
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 f9de 	bl	80021dc <I2C_WaitOnTXEFlagUntilTimeout>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00d      	beq.n	8001e42 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d107      	bne.n	8001e3e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e06b      	b.n	8001f1a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	781a      	ldrb	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_I2C_Master_Transmit+0x188>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d017      	beq.n	8001eb8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	6a39      	ldr	r1, [r7, #32]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f9ce 	bl	800225e <I2C_WaitOnBTFFlagUntilTimeout>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00d      	beq.n	8001ee4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d107      	bne.n	8001ee0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ede:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e01a      	b.n	8001f1a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d194      	bne.n	8001e16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001efa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	e000      	b.n	8001f1a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f18:	2302      	movs	r3, #2
  }
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	00100002 	.word	0x00100002
 8001f28:	ffff0000 	.word	0xffff0000

08001f2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d006      	beq.n	8001f56 <I2C_MasterRequestWrite+0x2a>
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d003      	beq.n	8001f56 <I2C_MasterRequestWrite+0x2a>
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f54:	d108      	bne.n	8001f68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	e00b      	b.n	8001f80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	2b12      	cmp	r3, #18
 8001f6e:	d107      	bne.n	8001f80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 f84f 	bl	8002030 <I2C_WaitOnFlagUntilTimeout>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00d      	beq.n	8001fb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fa6:	d103      	bne.n	8001fb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e035      	b.n	8002020 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fbc:	d108      	bne.n	8001fd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fbe:	897b      	ldrh	r3, [r7, #10]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fcc:	611a      	str	r2, [r3, #16]
 8001fce:	e01b      	b.n	8002008 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fd0:	897b      	ldrh	r3, [r7, #10]
 8001fd2:	11db      	asrs	r3, r3, #7
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f003 0306 	and.w	r3, r3, #6
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	f063 030f 	orn	r3, r3, #15
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	490e      	ldr	r1, [pc, #56]	; (8002028 <I2C_MasterRequestWrite+0xfc>)
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 f875 	bl	80020de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e010      	b.n	8002020 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ffe:	897b      	ldrh	r3, [r7, #10]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	4907      	ldr	r1, [pc, #28]	; (800202c <I2C_MasterRequestWrite+0x100>)
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f865 	bl	80020de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	00010008 	.word	0x00010008
 800202c:	00010002 	.word	0x00010002

08002030 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	4613      	mov	r3, r2
 800203e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002040:	e025      	b.n	800208e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002048:	d021      	beq.n	800208e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800204a:	f7ff f9bd 	bl	80013c8 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d302      	bcc.n	8002060 <I2C_WaitOnFlagUntilTimeout+0x30>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d116      	bne.n	800208e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2220      	movs	r2, #32
 800206a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f043 0220 	orr.w	r2, r3, #32
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e023      	b.n	80020d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	0c1b      	lsrs	r3, r3, #16
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b01      	cmp	r3, #1
 8002096:	d10d      	bne.n	80020b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	43da      	mvns	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	4013      	ands	r3, r2
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf0c      	ite	eq
 80020aa:	2301      	moveq	r3, #1
 80020ac:	2300      	movne	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	e00c      	b.n	80020ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	4013      	ands	r3, r2
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	bf0c      	ite	eq
 80020c6:	2301      	moveq	r3, #1
 80020c8:	2300      	movne	r3, #0
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d0b6      	beq.n	8002042 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b084      	sub	sp, #16
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020ec:	e051      	b.n	8002192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020fc:	d123      	bne.n	8002146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800210c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002116:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2220      	movs	r2, #32
 8002122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f043 0204 	orr.w	r2, r3, #4
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e046      	b.n	80021d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214c:	d021      	beq.n	8002192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214e:	f7ff f93b 	bl	80013c8 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	429a      	cmp	r2, r3
 800215c:	d302      	bcc.n	8002164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d116      	bne.n	8002192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f043 0220 	orr.w	r2, r3, #32
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e020      	b.n	80021d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	0c1b      	lsrs	r3, r3, #16
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d10c      	bne.n	80021b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	43da      	mvns	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4013      	ands	r3, r2
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	bf14      	ite	ne
 80021ae:	2301      	movne	r3, #1
 80021b0:	2300      	moveq	r3, #0
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	e00b      	b.n	80021ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	43da      	mvns	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	4013      	ands	r3, r2
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf14      	ite	ne
 80021c8:	2301      	movne	r3, #1
 80021ca:	2300      	moveq	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d18d      	bne.n	80020ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021e8:	e02d      	b.n	8002246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 f878 	bl	80022e0 <I2C_IsAcknowledgeFailed>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e02d      	b.n	8002256 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d021      	beq.n	8002246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002202:	f7ff f8e1 	bl	80013c8 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	429a      	cmp	r2, r3
 8002210:	d302      	bcc.n	8002218 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d116      	bne.n	8002246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2220      	movs	r2, #32
 8002222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f043 0220 	orr.w	r2, r3, #32
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e007      	b.n	8002256 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002250:	2b80      	cmp	r3, #128	; 0x80
 8002252:	d1ca      	bne.n	80021ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800226a:	e02d      	b.n	80022c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 f837 	bl	80022e0 <I2C_IsAcknowledgeFailed>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e02d      	b.n	80022d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002282:	d021      	beq.n	80022c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002284:	f7ff f8a0 	bl	80013c8 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	429a      	cmp	r2, r3
 8002292:	d302      	bcc.n	800229a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d116      	bne.n	80022c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	f043 0220 	orr.w	r2, r3, #32
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e007      	b.n	80022d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d1ca      	bne.n	800226c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f6:	d11b      	bne.n	8002330 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002300:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f043 0204 	orr.w	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e26c      	b.n	8002828 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 8087 	beq.w	800246a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800235c:	4b92      	ldr	r3, [pc, #584]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b04      	cmp	r3, #4
 8002366:	d00c      	beq.n	8002382 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002368:	4b8f      	ldr	r3, [pc, #572]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	2b08      	cmp	r3, #8
 8002372:	d112      	bne.n	800239a <HAL_RCC_OscConfig+0x5e>
 8002374:	4b8c      	ldr	r3, [pc, #560]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002380:	d10b      	bne.n	800239a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002382:	4b89      	ldr	r3, [pc, #548]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d06c      	beq.n	8002468 <HAL_RCC_OscConfig+0x12c>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d168      	bne.n	8002468 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e246      	b.n	8002828 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a2:	d106      	bne.n	80023b2 <HAL_RCC_OscConfig+0x76>
 80023a4:	4b80      	ldr	r3, [pc, #512]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a7f      	ldr	r2, [pc, #508]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	e02e      	b.n	8002410 <HAL_RCC_OscConfig+0xd4>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x98>
 80023ba:	4b7b      	ldr	r3, [pc, #492]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a7a      	ldr	r2, [pc, #488]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b78      	ldr	r3, [pc, #480]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a77      	ldr	r2, [pc, #476]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e01d      	b.n	8002410 <HAL_RCC_OscConfig+0xd4>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCC_OscConfig+0xbc>
 80023de:	4b72      	ldr	r3, [pc, #456]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a71      	ldr	r2, [pc, #452]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	4b6f      	ldr	r3, [pc, #444]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a6e      	ldr	r2, [pc, #440]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	e00b      	b.n	8002410 <HAL_RCC_OscConfig+0xd4>
 80023f8:	4b6b      	ldr	r3, [pc, #428]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a6a      	ldr	r2, [pc, #424]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	4b68      	ldr	r3, [pc, #416]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a67      	ldr	r2, [pc, #412]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800240a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800240e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d013      	beq.n	8002440 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe ffd6 	bl	80013c8 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe ffd2 	bl	80013c8 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1fa      	b.n	8002828 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002432:	4b5d      	ldr	r3, [pc, #372]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0xe4>
 800243e:	e014      	b.n	800246a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7fe ffc2 	bl	80013c8 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002448:	f7fe ffbe 	bl	80013c8 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	; 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e1e6      	b.n	8002828 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245a:	4b53      	ldr	r3, [pc, #332]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x10c>
 8002466:	e000      	b.n	800246a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d063      	beq.n	800253e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002476:	4b4c      	ldr	r3, [pc, #304]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002482:	4b49      	ldr	r3, [pc, #292]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b08      	cmp	r3, #8
 800248c:	d11c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x18c>
 800248e:	4b46      	ldr	r3, [pc, #280]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d116      	bne.n	80024c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249a:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <HAL_RCC_OscConfig+0x176>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d001      	beq.n	80024b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e1ba      	b.n	8002828 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b2:	4b3d      	ldr	r3, [pc, #244]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4939      	ldr	r1, [pc, #228]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c6:	e03a      	b.n	800253e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d020      	beq.n	8002512 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d0:	4b36      	ldr	r3, [pc, #216]	; (80025ac <HAL_RCC_OscConfig+0x270>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d6:	f7fe ff77 	bl	80013c8 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024de:	f7fe ff73 	bl	80013c8 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e19b      	b.n	8002828 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f0:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fc:	4b2a      	ldr	r3, [pc, #168]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4927      	ldr	r1, [pc, #156]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800250c:	4313      	orrs	r3, r2
 800250e:	600b      	str	r3, [r1, #0]
 8002510:	e015      	b.n	800253e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002512:	4b26      	ldr	r3, [pc, #152]	; (80025ac <HAL_RCC_OscConfig+0x270>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7fe ff56 	bl	80013c8 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002520:	f7fe ff52 	bl	80013c8 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e17a      	b.n	8002828 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002532:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d03a      	beq.n	80025c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d019      	beq.n	8002586 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002552:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <HAL_RCC_OscConfig+0x274>)
 8002554:	2201      	movs	r2, #1
 8002556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002558:	f7fe ff36 	bl	80013c8 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002560:	f7fe ff32 	bl	80013c8 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e15a      	b.n	8002828 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002572:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800257e:	2001      	movs	r0, #1
 8002580:	f000 fad8 	bl	8002b34 <RCC_Delay>
 8002584:	e01c      	b.n	80025c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_RCC_OscConfig+0x274>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258c:	f7fe ff1c 	bl	80013c8 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002592:	e00f      	b.n	80025b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002594:	f7fe ff18 	bl	80013c8 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d908      	bls.n	80025b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e140      	b.n	8002828 <HAL_RCC_OscConfig+0x4ec>
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000
 80025ac:	42420000 	.word	0x42420000
 80025b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b4:	4b9e      	ldr	r3, [pc, #632]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1e9      	bne.n	8002594 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80a6 	beq.w	800271a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ce:	2300      	movs	r3, #0
 80025d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d2:	4b97      	ldr	r3, [pc, #604]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10d      	bne.n	80025fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	4b94      	ldr	r3, [pc, #592]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	4a93      	ldr	r2, [pc, #588]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 80025e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e8:	61d3      	str	r3, [r2, #28]
 80025ea:	4b91      	ldr	r3, [pc, #580]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f6:	2301      	movs	r3, #1
 80025f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fa:	4b8e      	ldr	r3, [pc, #568]	; (8002834 <HAL_RCC_OscConfig+0x4f8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d118      	bne.n	8002638 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002606:	4b8b      	ldr	r3, [pc, #556]	; (8002834 <HAL_RCC_OscConfig+0x4f8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a8a      	ldr	r2, [pc, #552]	; (8002834 <HAL_RCC_OscConfig+0x4f8>)
 800260c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002612:	f7fe fed9 	bl	80013c8 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261a:	f7fe fed5 	bl	80013c8 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b64      	cmp	r3, #100	; 0x64
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e0fd      	b.n	8002828 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	4b81      	ldr	r3, [pc, #516]	; (8002834 <HAL_RCC_OscConfig+0x4f8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d106      	bne.n	800264e <HAL_RCC_OscConfig+0x312>
 8002640:	4b7b      	ldr	r3, [pc, #492]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4a7a      	ldr	r2, [pc, #488]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6213      	str	r3, [r2, #32]
 800264c:	e02d      	b.n	80026aa <HAL_RCC_OscConfig+0x36e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x334>
 8002656:	4b76      	ldr	r3, [pc, #472]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	4a75      	ldr	r2, [pc, #468]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	6213      	str	r3, [r2, #32]
 8002662:	4b73      	ldr	r3, [pc, #460]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	4a72      	ldr	r2, [pc, #456]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	f023 0304 	bic.w	r3, r3, #4
 800266c:	6213      	str	r3, [r2, #32]
 800266e:	e01c      	b.n	80026aa <HAL_RCC_OscConfig+0x36e>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2b05      	cmp	r3, #5
 8002676:	d10c      	bne.n	8002692 <HAL_RCC_OscConfig+0x356>
 8002678:	4b6d      	ldr	r3, [pc, #436]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4a6c      	ldr	r2, [pc, #432]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	6213      	str	r3, [r2, #32]
 8002684:	4b6a      	ldr	r3, [pc, #424]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4a69      	ldr	r2, [pc, #420]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6213      	str	r3, [r2, #32]
 8002690:	e00b      	b.n	80026aa <HAL_RCC_OscConfig+0x36e>
 8002692:	4b67      	ldr	r3, [pc, #412]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	4a66      	ldr	r2, [pc, #408]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	6213      	str	r3, [r2, #32]
 800269e:	4b64      	ldr	r3, [pc, #400]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	4a63      	ldr	r2, [pc, #396]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	f023 0304 	bic.w	r3, r3, #4
 80026a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d015      	beq.n	80026de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b2:	f7fe fe89 	bl	80013c8 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7fe fe85 	bl	80013c8 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e0ab      	b.n	8002828 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d0:	4b57      	ldr	r3, [pc, #348]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0ee      	beq.n	80026ba <HAL_RCC_OscConfig+0x37e>
 80026dc:	e014      	b.n	8002708 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026de:	f7fe fe73 	bl	80013c8 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e4:	e00a      	b.n	80026fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e6:	f7fe fe6f 	bl	80013c8 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e095      	b.n	8002828 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fc:	4b4c      	ldr	r3, [pc, #304]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1ee      	bne.n	80026e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002708:	7dfb      	ldrb	r3, [r7, #23]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d105      	bne.n	800271a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270e:	4b48      	ldr	r3, [pc, #288]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	4a47      	ldr	r2, [pc, #284]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 8002714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002718:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 8081 	beq.w	8002826 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002724:	4b42      	ldr	r3, [pc, #264]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b08      	cmp	r3, #8
 800272e:	d061      	beq.n	80027f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d146      	bne.n	80027c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002738:	4b3f      	ldr	r3, [pc, #252]	; (8002838 <HAL_RCC_OscConfig+0x4fc>)
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7fe fe43 	bl	80013c8 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002746:	f7fe fe3f 	bl	80013c8 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e067      	b.n	8002828 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002758:	4b35      	ldr	r3, [pc, #212]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1f0      	bne.n	8002746 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800276c:	d108      	bne.n	8002780 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800276e:	4b30      	ldr	r3, [pc, #192]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	492d      	ldr	r1, [pc, #180]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002780:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a19      	ldr	r1, [r3, #32]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	430b      	orrs	r3, r1
 8002792:	4927      	ldr	r1, [pc, #156]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002798:	4b27      	ldr	r3, [pc, #156]	; (8002838 <HAL_RCC_OscConfig+0x4fc>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279e:	f7fe fe13 	bl	80013c8 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a6:	f7fe fe0f 	bl	80013c8 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e037      	b.n	8002828 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027b8:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x46a>
 80027c4:	e02f      	b.n	8002826 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c6:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <HAL_RCC_OscConfig+0x4fc>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7fe fdfc 	bl	80013c8 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d4:	f7fe fdf8 	bl	80013c8 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e020      	b.n	8002828 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x498>
 80027f2:	e018      	b.n	8002826 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e013      	b.n	8002828 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_RCC_OscConfig+0x4f4>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	429a      	cmp	r2, r3
 8002812:	d106      	bne.n	8002822 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d001      	beq.n	8002826 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000
 8002834:	40007000 	.word	0x40007000
 8002838:	42420060 	.word	0x42420060

0800283c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0d0      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002850:	4b6a      	ldr	r3, [pc, #424]	; (80029fc <HAL_RCC_ClockConfig+0x1c0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d910      	bls.n	8002880 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	4b67      	ldr	r3, [pc, #412]	; (80029fc <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 0207 	bic.w	r2, r3, #7
 8002866:	4965      	ldr	r1, [pc, #404]	; (80029fc <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800286e:	4b63      	ldr	r3, [pc, #396]	; (80029fc <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d001      	beq.n	8002880 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0b8      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d020      	beq.n	80028ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002898:	4b59      	ldr	r3, [pc, #356]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4a58      	ldr	r2, [pc, #352]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028b0:	4b53      	ldr	r3, [pc, #332]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	4a52      	ldr	r2, [pc, #328]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028bc:	4b50      	ldr	r3, [pc, #320]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	494d      	ldr	r1, [pc, #308]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d040      	beq.n	800295c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d107      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e2:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d115      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e07f      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d107      	bne.n	800290a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fa:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d109      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e073      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290a:	4b3d      	ldr	r3, [pc, #244]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e06b      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800291a:	4b39      	ldr	r3, [pc, #228]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f023 0203 	bic.w	r2, r3, #3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4936      	ldr	r1, [pc, #216]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800292c:	f7fe fd4c 	bl	80013c8 <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002932:	e00a      	b.n	800294a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002934:	f7fe fd48 	bl	80013c8 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e053      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	4b2d      	ldr	r3, [pc, #180]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 020c 	and.w	r2, r3, #12
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	429a      	cmp	r2, r3
 800295a:	d1eb      	bne.n	8002934 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800295c:	4b27      	ldr	r3, [pc, #156]	; (80029fc <HAL_RCC_ClockConfig+0x1c0>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d210      	bcs.n	800298c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296a:	4b24      	ldr	r3, [pc, #144]	; (80029fc <HAL_RCC_ClockConfig+0x1c0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f023 0207 	bic.w	r2, r3, #7
 8002972:	4922      	ldr	r1, [pc, #136]	; (80029fc <HAL_RCC_ClockConfig+0x1c0>)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297a:	4b20      	ldr	r3, [pc, #128]	; (80029fc <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d001      	beq.n	800298c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e032      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002998:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4916      	ldr	r1, [pc, #88]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029b6:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	490e      	ldr	r1, [pc, #56]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ca:	f000 f821 	bl	8002a10 <HAL_RCC_GetSysClockFreq>
 80029ce:	4602      	mov	r2, r0
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	490a      	ldr	r1, [pc, #40]	; (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 80029dc:	5ccb      	ldrb	r3, [r1, r3]
 80029de:	fa22 f303 	lsr.w	r3, r2, r3
 80029e2:	4a09      	ldr	r2, [pc, #36]	; (8002a08 <HAL_RCC_ClockConfig+0x1cc>)
 80029e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <HAL_RCC_ClockConfig+0x1d0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe fcaa 	bl	8001344 <HAL_InitTick>

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40022000 	.word	0x40022000
 8002a00:	40021000 	.word	0x40021000
 8002a04:	08003f94 	.word	0x08003f94
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	20000004 	.word	0x20000004

08002a10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a10:	b490      	push	{r4, r7}
 8002a12:	b08a      	sub	sp, #40	; 0x28
 8002a14:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a16:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a18:	1d3c      	adds	r4, r7, #4
 8002a1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a20:	f240 2301 	movw	r3, #513	; 0x201
 8002a24:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61bb      	str	r3, [r7, #24]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a3a:	4b22      	ldr	r3, [pc, #136]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d002      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0x40>
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	d003      	beq.n	8002a56 <HAL_RCC_GetSysClockFreq+0x46>
 8002a4e:	e02d      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a50:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a52:	623b      	str	r3, [r7, #32]
      break;
 8002a54:	e02d      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	0c9b      	lsrs	r3, r3, #18
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a62:	4413      	add	r3, r2
 8002a64:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a68:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d013      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a74:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	0c5b      	lsrs	r3, r3, #17
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a82:	4413      	add	r3, r2
 8002a84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	4a0e      	ldr	r2, [pc, #56]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a8e:	fb02 f203 	mul.w	r2, r2, r3
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
 8002a9a:	e004      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	4a0b      	ldr	r2, [pc, #44]	; (8002acc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002aa0:	fb02 f303 	mul.w	r3, r2, r3
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	623b      	str	r3, [r7, #32]
      break;
 8002aaa:	e002      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aae:	623b      	str	r3, [r7, #32]
      break;
 8002ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3728      	adds	r7, #40	; 0x28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc90      	pop	{r4, r7}
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	08003f84 	.word	0x08003f84
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	007a1200 	.word	0x007a1200
 8002acc:	003d0900 	.word	0x003d0900

08002ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad4:	4b02      	ldr	r3, [pc, #8]	; (8002ae0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	20000000 	.word	0x20000000

08002ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ae8:	f7ff fff2 	bl	8002ad0 <HAL_RCC_GetHCLKFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	4903      	ldr	r1, [pc, #12]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40021000 	.word	0x40021000
 8002b08:	08003fa4 	.word	0x08003fa4

08002b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b10:	f7ff ffde 	bl	8002ad0 <HAL_RCC_GetHCLKFreq>
 8002b14:	4602      	mov	r2, r0
 8002b16:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	0adb      	lsrs	r3, r3, #11
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	4903      	ldr	r1, [pc, #12]	; (8002b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b22:	5ccb      	ldrb	r3, [r1, r3]
 8002b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	08003fa4 	.word	0x08003fa4

08002b34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <RCC_Delay+0x34>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a0a      	ldr	r2, [pc, #40]	; (8002b6c <RCC_Delay+0x38>)
 8002b42:	fba2 2303 	umull	r2, r3, r2, r3
 8002b46:	0a5b      	lsrs	r3, r3, #9
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	fb02 f303 	mul.w	r3, r2, r3
 8002b4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b50:	bf00      	nop
  }
  while (Delay --);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	1e5a      	subs	r2, r3, #1
 8002b56:	60fa      	str	r2, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f9      	bne.n	8002b50 <RCC_Delay+0x1c>
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr
 8002b68:	20000000 	.word	0x20000000
 8002b6c:	10624dd3 	.word	0x10624dd3

08002b70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e041      	b.n	8002c06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d106      	bne.n	8002b9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fe fa8a 	bl	80010b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3304      	adds	r3, #4
 8002bac:	4619      	mov	r1, r3
 8002bae:	4610      	mov	r0, r2
 8002bb0:	f000 f98e 	bl	8002ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d109      	bne.n	8002c34 <HAL_TIM_PWM_Start+0x24>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	bf14      	ite	ne
 8002c2c:	2301      	movne	r3, #1
 8002c2e:	2300      	moveq	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e022      	b.n	8002c7a <HAL_TIM_PWM_Start+0x6a>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d109      	bne.n	8002c4e <HAL_TIM_PWM_Start+0x3e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	bf14      	ite	ne
 8002c46:	2301      	movne	r3, #1
 8002c48:	2300      	moveq	r3, #0
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	e015      	b.n	8002c7a <HAL_TIM_PWM_Start+0x6a>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d109      	bne.n	8002c68 <HAL_TIM_PWM_Start+0x58>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	bf14      	ite	ne
 8002c60:	2301      	movne	r3, #1
 8002c62:	2300      	moveq	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	e008      	b.n	8002c7a <HAL_TIM_PWM_Start+0x6a>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	bf14      	ite	ne
 8002c74:	2301      	movne	r3, #1
 8002c76:	2300      	moveq	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e05e      	b.n	8002d40 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d104      	bne.n	8002c92 <HAL_TIM_PWM_Start+0x82>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c90:	e013      	b.n	8002cba <HAL_TIM_PWM_Start+0xaa>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d104      	bne.n	8002ca2 <HAL_TIM_PWM_Start+0x92>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ca0:	e00b      	b.n	8002cba <HAL_TIM_PWM_Start+0xaa>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d104      	bne.n	8002cb2 <HAL_TIM_PWM_Start+0xa2>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cb0:	e003      	b.n	8002cba <HAL_TIM_PWM_Start+0xaa>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	6839      	ldr	r1, [r7, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 faee 	bl	80032a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1e      	ldr	r2, [pc, #120]	; (8002d48 <HAL_TIM_PWM_Start+0x138>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d107      	bne.n	8002ce2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ce0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <HAL_TIM_PWM_Start+0x138>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d00e      	beq.n	8002d0a <HAL_TIM_PWM_Start+0xfa>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf4:	d009      	beq.n	8002d0a <HAL_TIM_PWM_Start+0xfa>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <HAL_TIM_PWM_Start+0x13c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d004      	beq.n	8002d0a <HAL_TIM_PWM_Start+0xfa>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a12      	ldr	r2, [pc, #72]	; (8002d50 <HAL_TIM_PWM_Start+0x140>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d111      	bne.n	8002d2e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b06      	cmp	r3, #6
 8002d1a:	d010      	beq.n	8002d3e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d2c:	e007      	b.n	8002d3e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0201 	orr.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40012c00 	.word	0x40012c00
 8002d4c:	40000400 	.word	0x40000400
 8002d50:	40000800 	.word	0x40000800

08002d54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e0ac      	b.n	8002ec8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b0c      	cmp	r3, #12
 8002d7a:	f200 809f 	bhi.w	8002ebc <HAL_TIM_PWM_ConfigChannel+0x168>
 8002d7e:	a201      	add	r2, pc, #4	; (adr r2, 8002d84 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d84:	08002db9 	.word	0x08002db9
 8002d88:	08002ebd 	.word	0x08002ebd
 8002d8c:	08002ebd 	.word	0x08002ebd
 8002d90:	08002ebd 	.word	0x08002ebd
 8002d94:	08002df9 	.word	0x08002df9
 8002d98:	08002ebd 	.word	0x08002ebd
 8002d9c:	08002ebd 	.word	0x08002ebd
 8002da0:	08002ebd 	.word	0x08002ebd
 8002da4:	08002e3b 	.word	0x08002e3b
 8002da8:	08002ebd 	.word	0x08002ebd
 8002dac:	08002ebd 	.word	0x08002ebd
 8002db0:	08002ebd 	.word	0x08002ebd
 8002db4:	08002e7b 	.word	0x08002e7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 f8e8 	bl	8002f94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0208 	orr.w	r2, r2, #8
 8002dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0204 	bic.w	r2, r2, #4
 8002de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6999      	ldr	r1, [r3, #24]
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	691a      	ldr	r2, [r3, #16]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	619a      	str	r2, [r3, #24]
      break;
 8002df6:	e062      	b.n	8002ebe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 f92e 	bl	8003060 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699a      	ldr	r2, [r3, #24]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699a      	ldr	r2, [r3, #24]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6999      	ldr	r1, [r3, #24]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	021a      	lsls	r2, r3, #8
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	619a      	str	r2, [r3, #24]
      break;
 8002e38:	e041      	b.n	8002ebe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68b9      	ldr	r1, [r7, #8]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 f977 	bl	8003134 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69da      	ldr	r2, [r3, #28]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0208 	orr.w	r2, r2, #8
 8002e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	69da      	ldr	r2, [r3, #28]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0204 	bic.w	r2, r2, #4
 8002e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	69d9      	ldr	r1, [r3, #28]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	61da      	str	r2, [r3, #28]
      break;
 8002e78:	e021      	b.n	8002ebe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68b9      	ldr	r1, [r7, #8]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 f9c1 	bl	8003208 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69da      	ldr	r2, [r3, #28]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69da      	ldr	r2, [r3, #28]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69d9      	ldr	r1, [r3, #28]
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	021a      	lsls	r2, r3, #8
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	61da      	str	r2, [r3, #28]
      break;
 8002eba:	e000      	b.n	8002ebe <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002ebc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a29      	ldr	r2, [pc, #164]	; (8002f88 <TIM_Base_SetConfig+0xb8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00b      	beq.n	8002f00 <TIM_Base_SetConfig+0x30>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eee:	d007      	beq.n	8002f00 <TIM_Base_SetConfig+0x30>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a26      	ldr	r2, [pc, #152]	; (8002f8c <TIM_Base_SetConfig+0xbc>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d003      	beq.n	8002f00 <TIM_Base_SetConfig+0x30>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a25      	ldr	r2, [pc, #148]	; (8002f90 <TIM_Base_SetConfig+0xc0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d108      	bne.n	8002f12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <TIM_Base_SetConfig+0xb8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00b      	beq.n	8002f32 <TIM_Base_SetConfig+0x62>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f20:	d007      	beq.n	8002f32 <TIM_Base_SetConfig+0x62>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a19      	ldr	r2, [pc, #100]	; (8002f8c <TIM_Base_SetConfig+0xbc>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d003      	beq.n	8002f32 <TIM_Base_SetConfig+0x62>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a18      	ldr	r2, [pc, #96]	; (8002f90 <TIM_Base_SetConfig+0xc0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d108      	bne.n	8002f44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a07      	ldr	r2, [pc, #28]	; (8002f88 <TIM_Base_SetConfig+0xb8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d103      	bne.n	8002f78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	615a      	str	r2, [r3, #20]
}
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr
 8002f88:	40012c00 	.word	0x40012c00
 8002f8c:	40000400 	.word	0x40000400
 8002f90:	40000800 	.word	0x40000800

08002f94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	f023 0201 	bic.w	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f023 0303 	bic.w	r3, r3, #3
 8002fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f023 0302 	bic.w	r3, r3, #2
 8002fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a1c      	ldr	r2, [pc, #112]	; (800305c <TIM_OC1_SetConfig+0xc8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d10c      	bne.n	800300a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f023 0308 	bic.w	r3, r3, #8
 8002ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f023 0304 	bic.w	r3, r3, #4
 8003008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a13      	ldr	r2, [pc, #76]	; (800305c <TIM_OC1_SetConfig+0xc8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d111      	bne.n	8003036 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	621a      	str	r2, [r3, #32]
}
 8003050:	bf00      	nop
 8003052:	371c      	adds	r7, #28
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40012c00 	.word	0x40012c00

08003060 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	f023 0210 	bic.w	r2, r3, #16
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800308e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	021b      	lsls	r3, r3, #8
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f023 0320 	bic.w	r3, r3, #32
 80030aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a1d      	ldr	r2, [pc, #116]	; (8003130 <TIM_OC2_SetConfig+0xd0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d10d      	bne.n	80030dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a14      	ldr	r2, [pc, #80]	; (8003130 <TIM_OC2_SetConfig+0xd0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d113      	bne.n	800310c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	621a      	str	r2, [r3, #32]
}
 8003126:	bf00      	nop
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr
 8003130:	40012c00 	.word	0x40012c00

08003134 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0303 	bic.w	r3, r3, #3
 800316a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800317c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	021b      	lsls	r3, r3, #8
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	4313      	orrs	r3, r2
 8003188:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a1d      	ldr	r2, [pc, #116]	; (8003204 <TIM_OC3_SetConfig+0xd0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d10d      	bne.n	80031ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003198:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a14      	ldr	r2, [pc, #80]	; (8003204 <TIM_OC3_SetConfig+0xd0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d113      	bne.n	80031de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	621a      	str	r2, [r3, #32]
}
 80031f8:	bf00      	nop
 80031fa:	371c      	adds	r7, #28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40012c00 	.word	0x40012c00

08003208 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800323e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4313      	orrs	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003252:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	031b      	lsls	r3, r3, #12
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a0f      	ldr	r2, [pc, #60]	; (80032a0 <TIM_OC4_SetConfig+0x98>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d109      	bne.n	800327c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800326e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	019b      	lsls	r3, r3, #6
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	4313      	orrs	r3, r2
 800327a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	621a      	str	r2, [r3, #32]
}
 8003296:	bf00      	nop
 8003298:	371c      	adds	r7, #28
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr
 80032a0:	40012c00 	.word	0x40012c00

080032a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f003 031f 	and.w	r3, r3, #31
 80032b6:	2201      	movs	r2, #1
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a1a      	ldr	r2, [r3, #32]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	401a      	ands	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a1a      	ldr	r2, [r3, #32]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	fa01 f303 	lsl.w	r3, r1, r3
 80032dc:	431a      	orrs	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	621a      	str	r2, [r3, #32]
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003300:	2302      	movs	r3, #2
 8003302:	e046      	b.n	8003392 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a16      	ldr	r2, [pc, #88]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00e      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003350:	d009      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a12      	ldr	r2, [pc, #72]	; (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d004      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a10      	ldr	r2, [pc, #64]	; (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d10c      	bne.n	8003380 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800336c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	4313      	orrs	r3, r2
 8003376:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40000400 	.word	0x40000400
 80033a4:	40000800 	.word	0x40000800

080033a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e03d      	b.n	8003440 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4313      	orrs	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr

0800344a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e03f      	b.n	80034dc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d106      	bne.n	8003476 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7fd fe9f 	bl	80011b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2224      	movs	r2, #36	; 0x24
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800348c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fba8 	bl	8003be4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	4613      	mov	r3, r2
 80034f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b20      	cmp	r3, #32
 80034fc:	d11d      	bne.n	800353a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <HAL_UART_Receive_IT+0x26>
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e016      	b.n	800353c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_UART_Receive_IT+0x38>
 8003518:	2302      	movs	r3, #2
 800351a:	e00f      	b.n	800353c <HAL_UART_Receive_IT+0x58>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	461a      	mov	r2, r3
 800352e:	68b9      	ldr	r1, [r7, #8]
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 f9ce 	bl	80038d2 <UART_Start_Receive_IT>
 8003536:	4603      	mov	r3, r0
 8003538:	e000      	b.n	800353c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800353a:	2302      	movs	r3, #2
  }
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08a      	sub	sp, #40	; 0x28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003564:	2300      	movs	r3, #0
 8003566:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10d      	bne.n	8003596 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_UART_IRQHandler+0x52>
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fa7f 	bl	8003a92 <UART_Receive_IT>
      return;
 8003594:	e17b      	b.n	800388e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80b1 	beq.w	8003700 <HAL_UART_IRQHandler+0x1bc>
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d105      	bne.n	80035b4 <HAL_UART_IRQHandler+0x70>
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 80a6 	beq.w	8003700 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_UART_IRQHandler+0x90>
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	f043 0201 	orr.w	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <HAL_UART_IRQHandler+0xb0>
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	f043 0202 	orr.w	r2, r3, #2
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_UART_IRQHandler+0xd0>
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f043 0204 	orr.w	r2, r3, #4
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00f      	beq.n	800363e <HAL_UART_IRQHandler+0xfa>
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b00      	cmp	r3, #0
 8003626:	d104      	bne.n	8003632 <HAL_UART_IRQHandler+0xee>
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f043 0208 	orr.w	r2, r3, #8
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 811e 	beq.w	8003884 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b00      	cmp	r3, #0
 8003650:	d007      	beq.n	8003662 <HAL_UART_IRQHandler+0x11e>
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fa18 	bl	8003a92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366c:	2b00      	cmp	r3, #0
 800366e:	bf14      	ite	ne
 8003670:	2301      	movne	r3, #1
 8003672:	2300      	moveq	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d102      	bne.n	800368a <HAL_UART_IRQHandler+0x146>
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d031      	beq.n	80036ee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f95a 	bl	8003944 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d023      	beq.n	80036e6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695a      	ldr	r2, [r3, #20]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d013      	beq.n	80036de <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	4a76      	ldr	r2, [pc, #472]	; (8003894 <HAL_UART_IRQHandler+0x350>)
 80036bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fd fff6 	bl	80016b4 <HAL_DMA_Abort_IT>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d016      	beq.n	80036fc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036d8:	4610      	mov	r0, r2
 80036da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036dc:	e00e      	b.n	80036fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f8e3 	bl	80038aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e4:	e00a      	b.n	80036fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f8df 	bl	80038aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ec:	e006      	b.n	80036fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f8db 	bl	80038aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80036fa:	e0c3      	b.n	8003884 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fc:	bf00      	nop
    return;
 80036fe:	e0c1      	b.n	8003884 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	2b01      	cmp	r3, #1
 8003706:	f040 80a1 	bne.w	800384c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 809b 	beq.w	800384c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 8095 	beq.w	800384c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003742:	2b00      	cmp	r3, #0
 8003744:	d04e      	beq.n	80037e4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003750:	8a3b      	ldrh	r3, [r7, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 8098 	beq.w	8003888 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800375c:	8a3a      	ldrh	r2, [r7, #16]
 800375e:	429a      	cmp	r2, r3
 8003760:	f080 8092 	bcs.w	8003888 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	8a3a      	ldrh	r2, [r7, #16]
 8003768:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b20      	cmp	r3, #32
 8003772:	d02b      	beq.n	80037cc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003782:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0201 	bic.w	r2, r2, #1
 8003792:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695a      	ldr	r2, [r3, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037a2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0210 	bic.w	r2, r2, #16
 80037c0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fd ff39 	bl	800163e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	b29b      	uxth	r3, r3
 80037da:	4619      	mov	r1, r3
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f86d 	bl	80038bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80037e2:	e051      	b.n	8003888 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d047      	beq.n	800388c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80037fc:	8a7b      	ldrh	r3, [r7, #18]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d044      	beq.n	800388c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003810:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695a      	ldr	r2, [r3, #20]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0201 	bic.w	r2, r2, #1
 8003820:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0210 	bic.w	r2, r2, #16
 800383e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003840:	8a7b      	ldrh	r3, [r7, #18]
 8003842:	4619      	mov	r1, r3
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f839 	bl	80038bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800384a:	e01f      	b.n	800388c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <HAL_UART_IRQHandler+0x324>
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f8af 	bl	80039c4 <UART_Transmit_IT>
    return;
 8003866:	e012      	b.n	800388e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00d      	beq.n	800388e <HAL_UART_IRQHandler+0x34a>
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f8f0 	bl	8003a62 <UART_EndTransmit_IT>
    return;
 8003882:	e004      	b.n	800388e <HAL_UART_IRQHandler+0x34a>
    return;
 8003884:	bf00      	nop
 8003886:	e002      	b.n	800388e <HAL_UART_IRQHandler+0x34a>
      return;
 8003888:	bf00      	nop
 800388a:	e000      	b.n	800388e <HAL_UART_IRQHandler+0x34a>
      return;
 800388c:	bf00      	nop
  }
}
 800388e:	3728      	adds	r7, #40	; 0x28
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	0800399d 	.word	0x0800399d

08003898 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr

080038aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr

080038d2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b085      	sub	sp, #20
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	4613      	mov	r3, r2
 80038de:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	88fa      	ldrh	r2, [r7, #6]
 80038ea:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	88fa      	ldrh	r2, [r7, #6]
 80038f0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2222      	movs	r2, #34	; 0x22
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003916:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0220 	orr.w	r2, r2, #32
 8003936:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr

08003944 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800395a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0201 	bic.w	r2, r2, #1
 800396a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	2b01      	cmp	r3, #1
 8003972:	d107      	bne.n	8003984 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0210 	bic.w	r2, r2, #16
 8003982:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f7ff ff77 	bl	80038aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b21      	cmp	r3, #33	; 0x21
 80039d6:	d13e      	bne.n	8003a56 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e0:	d114      	bne.n	8003a0c <UART_Transmit_IT+0x48>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d110      	bne.n	8003a0c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	461a      	mov	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	1c9a      	adds	r2, r3, #2
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	621a      	str	r2, [r3, #32]
 8003a0a:	e008      	b.n	8003a1e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	1c59      	adds	r1, r3, #1
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6211      	str	r1, [r2, #32]
 8003a16:	781a      	ldrb	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10f      	bne.n	8003a52 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a40:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a50:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	e000      	b.n	8003a58 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a56:	2302      	movs	r3, #2
  }
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr

08003a62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b082      	sub	sp, #8
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff ff08 	bl	8003898 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b086      	sub	sp, #24
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b22      	cmp	r3, #34	; 0x22
 8003aa4:	f040 8099 	bne.w	8003bda <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab0:	d117      	bne.n	8003ae2 <UART_Receive_IT+0x50>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d113      	bne.n	8003ae2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ada:	1c9a      	adds	r2, r3, #2
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28
 8003ae0:	e026      	b.n	8003b30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af4:	d007      	beq.n	8003b06 <UART_Receive_IT+0x74>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10a      	bne.n	8003b14 <UART_Receive_IT+0x82>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	701a      	strb	r2, [r3, #0]
 8003b12:	e008      	b.n	8003b26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d148      	bne.n	8003bd6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0220 	bic.w	r2, r2, #32
 8003b52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0201 	bic.w	r2, r2, #1
 8003b72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d123      	bne.n	8003bcc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0210 	bic.w	r2, r2, #16
 8003b98:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b10      	cmp	r3, #16
 8003ba6:	d10a      	bne.n	8003bbe <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff fe79 	bl	80038bc <HAL_UARTEx_RxEventCallback>
 8003bca:	e002      	b.n	8003bd2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7fd f9e1 	bl	8000f94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e002      	b.n	8003bdc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e000      	b.n	8003bdc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003bda:	2302      	movs	r3, #2
  }
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c1e:	f023 030c 	bic.w	r3, r3, #12
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6812      	ldr	r2, [r2, #0]
 8003c26:	68b9      	ldr	r1, [r7, #8]
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a2c      	ldr	r2, [pc, #176]	; (8003cf8 <UART_SetConfig+0x114>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d103      	bne.n	8003c54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c4c:	f7fe ff5e 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	e002      	b.n	8003c5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c54:	f7fe ff46 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 8003c58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	009a      	lsls	r2, r3, #2
 8003c64:	441a      	add	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c70:	4a22      	ldr	r2, [pc, #136]	; (8003cfc <UART_SetConfig+0x118>)
 8003c72:	fba2 2303 	umull	r2, r3, r2, r3
 8003c76:	095b      	lsrs	r3, r3, #5
 8003c78:	0119      	lsls	r1, r3, #4
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	009a      	lsls	r2, r3, #2
 8003c84:	441a      	add	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c90:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <UART_SetConfig+0x118>)
 8003c92:	fba3 0302 	umull	r0, r3, r3, r2
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	2064      	movs	r0, #100	; 0x64
 8003c9a:	fb00 f303 	mul.w	r3, r0, r3
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	3332      	adds	r3, #50	; 0x32
 8003ca4:	4a15      	ldr	r2, [pc, #84]	; (8003cfc <UART_SetConfig+0x118>)
 8003ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cb0:	4419      	add	r1, r3
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	009a      	lsls	r2, r3, #2
 8003cbc:	441a      	add	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cc8:	4b0c      	ldr	r3, [pc, #48]	; (8003cfc <UART_SetConfig+0x118>)
 8003cca:	fba3 0302 	umull	r0, r3, r3, r2
 8003cce:	095b      	lsrs	r3, r3, #5
 8003cd0:	2064      	movs	r0, #100	; 0x64
 8003cd2:	fb00 f303 	mul.w	r3, r0, r3
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	3332      	adds	r3, #50	; 0x32
 8003cdc:	4a07      	ldr	r2, [pc, #28]	; (8003cfc <UART_SetConfig+0x118>)
 8003cde:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	f003 020f 	and.w	r2, r3, #15
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	440a      	add	r2, r1
 8003cee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cf0:	bf00      	nop
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40013800 	.word	0x40013800
 8003cfc:	51eb851f 	.word	0x51eb851f

08003d00 <__libc_init_array>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	2600      	movs	r6, #0
 8003d04:	4d0c      	ldr	r5, [pc, #48]	; (8003d38 <__libc_init_array+0x38>)
 8003d06:	4c0d      	ldr	r4, [pc, #52]	; (8003d3c <__libc_init_array+0x3c>)
 8003d08:	1b64      	subs	r4, r4, r5
 8003d0a:	10a4      	asrs	r4, r4, #2
 8003d0c:	42a6      	cmp	r6, r4
 8003d0e:	d109      	bne.n	8003d24 <__libc_init_array+0x24>
 8003d10:	f000 f822 	bl	8003d58 <_init>
 8003d14:	2600      	movs	r6, #0
 8003d16:	4d0a      	ldr	r5, [pc, #40]	; (8003d40 <__libc_init_array+0x40>)
 8003d18:	4c0a      	ldr	r4, [pc, #40]	; (8003d44 <__libc_init_array+0x44>)
 8003d1a:	1b64      	subs	r4, r4, r5
 8003d1c:	10a4      	asrs	r4, r4, #2
 8003d1e:	42a6      	cmp	r6, r4
 8003d20:	d105      	bne.n	8003d2e <__libc_init_array+0x2e>
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
 8003d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d28:	4798      	blx	r3
 8003d2a:	3601      	adds	r6, #1
 8003d2c:	e7ee      	b.n	8003d0c <__libc_init_array+0xc>
 8003d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d32:	4798      	blx	r3
 8003d34:	3601      	adds	r6, #1
 8003d36:	e7f2      	b.n	8003d1e <__libc_init_array+0x1e>
 8003d38:	08003fac 	.word	0x08003fac
 8003d3c:	08003fac 	.word	0x08003fac
 8003d40:	08003fac 	.word	0x08003fac
 8003d44:	08003fb0 	.word	0x08003fb0

08003d48 <memset>:
 8003d48:	4603      	mov	r3, r0
 8003d4a:	4402      	add	r2, r0
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d100      	bne.n	8003d52 <memset+0xa>
 8003d50:	4770      	bx	lr
 8003d52:	f803 1b01 	strb.w	r1, [r3], #1
 8003d56:	e7f9      	b.n	8003d4c <memset+0x4>

08003d58 <_init>:
 8003d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5a:	bf00      	nop
 8003d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5e:	bc08      	pop	{r3}
 8003d60:	469e      	mov	lr, r3
 8003d62:	4770      	bx	lr

08003d64 <_fini>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	bf00      	nop
 8003d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6a:	bc08      	pop	{r3}
 8003d6c:	469e      	mov	lr, r3
 8003d6e:	4770      	bx	lr
